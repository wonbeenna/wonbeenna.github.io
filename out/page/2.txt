1:"$Sreact.fragment"
2:I[9243,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","177","static/chunks/app/layout-6125c08b6d2f6731.js"],""]
3:I[881,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","177","static/chunks/app/layout-6125c08b6d2f6731.js"],"Providers"]
4:I[6874,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","848","static/chunks/app/page/%5Bpage%5D/page-728e09c32f66e03f.js"],""]
5:I[3063,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","177","static/chunks/app/layout-6125c08b6d2f6731.js"],"Image"]
6:I[1186,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","177","static/chunks/app/layout-6125c08b6d2f6731.js"],"default"]
7:I[7555,[],""]
8:I[1295,[],""]
a:I[9665,[],"MetadataBoundary"]
c:I[9665,[],"OutletBoundary"]
f:I[4911,[],"AsyncMetadataOutlet"]
11:I[9665,[],"ViewportBoundary"]
13:I[6614,[],""]
:HL["/_next/static/media/47cbc4e2adbc5db9-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/e539936c7dc6b882.css","style"]
:HL["/_next/static/css/2e1c4c7c40082d2a.css","style"]
0:{"P":null,"b":"z3NOd-RwbnNygtPSsa4a5","p":"","c":["","page","2"],"i":false,"f":[[["",{"children":["page",{"children":[["page","2","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e539936c7dc6b882.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/2e1c4c7c40082d2a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ko","suppressHydrationWarning":true,"children":[["$","$L2",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-LFDRQZPCBN"}],["$","$L2",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n \n          gtag('config', 'G-LFDRQZPCBN');\n        "}],["$","body",null,{"suppressHydrationWarning":true,"className":"__className_518cef","children":["$","$L3",null,{"children":[["$","header",null,{"className":"sticky top-0 z-10 mx-auto my-0 h-[56px] border-b border-b-gray200 bg-white px-[24px] py-0 dark:bg-darkBg01","children":["$","section",null,{"className":"m-auto flex h-full max-w-[970px] items-center justify-between","children":[["$","div",null,{"className":"flex items-center gap-[20px]","children":[["$","$L4",null,{"href":"/","children":["$","$L5",null,{"className":"h-[56px] w-[60px]","src":"/assets/icons/been-logo.svg","width":60,"height":56,"priority":true,"alt":"logo"}]}],["$","div",null,{"className":"flex items-center gap-[20px]","children":["$","$L4",null,{"href":"/about","children":"About"}]}]]}],["$","$L6",null,{}]]}]}],["$","main",null,{"className":"mx-auto my-0 max-w-[970px] p-[16px]","children":["$","$L7",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"flex items-center justify-center pb-[16px] text-center text-[14px] text-gray600","children":"Copyright © Been."}]]}]}]]}]]}],{"children":["page",["$","$1","c",{"children":[null,["$","$L7",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["page","2","d"],["$","$1","c",{"children":[null,["$","$L7",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L9",["$","$La",null,{"children":"$Lb"}],null,["$","$Lc",null,{"children":["$Ld","$Le",["$","$Lf",null,{"promise":"$@10"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","xBSLE8JdmU-hytkjlN_Th",{"children":[["$","$L11",null,{"children":"$L12"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$13","$undefined"],"s":false,"S":true}
14:"$Sreact.suspense"
15:I[4911,[],"AsyncMetadata"]
b:["$","$14",null,{"fallback":null,"children":["$","$L15",null,{"promise":"$@16"}]}]
17:I[1114,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","848","static/chunks/app/page/%5Bpage%5D/page-728e09c32f66e03f.js"],"default"]
e:null
18:T2f94,
## 웹팩(기본)배경
- 웹팩은 모던 javascript 어플리케이션을 위한 정적 모듈 번들러이다. 번들러는 웹팩 이외에도 다양한게 있는데 (rollup , esbuild , vite , parcel 등) 웹팩이 가장 오래되었기도하고 많이 사용하고 있기 때문에 이번 기회에 배워보기로 했다.

- Javascript에서 문법 수준에서 모듈을 지원하기 시작한것은 ES2015부터 이다. import/export 구문이 없었던 이전 상황에서는 하나의 함수를 만들었을 때 전역 공간에 노출되어 버그나 오류를 발생시킬 수 있었다.

예를들어 아래와 같은 덧셈 함수는

```javascript
// math.js
function add(a,b){
    return a+b;
}
```

```javascript
// app.js
add(10,20);
```

모두 하나의 HTML 파일안에서 로딩해야만 실행된다. math.js가 로딩되면 app.js는 add 함수를 찾고 실행시키는데, add 함수가 전역으로 사용되기 때문에 다른 파일에서 같은 이름의 함수를 사용하면 충돌이 발생할 수 있다.

---

이런 문제를 예방하기위해 IIFE(즉시실행함수) 방식의 스코프를 사용했다.

```javascript
var math = math || {}

;(function () {
  function add(a, b) {
    return a + b
  }
  math.add = add
})();
```

함수 스코프를 만들어 외부에서 접근할 수 없도록해 충돌을 막을 수 있었고, 전역에 선언한 math라는 이름만 사용하면 된다.

---

자바스크립트 모듈을 구현하는 대표적인 명세는 AMD와 CommonJS가 있다.

- AMD(Asynchronous Module Definition)는 비동기 방식으로 모듈을 로딩한다. 브라우저 환경에서 주로 사용된다.
- UMD(Universal Module Definition)는 AMD와 CommonJS를 지원하는 모듈을 만들기 위해 사용된다.
- CommonJS는 export로 모듈을 만들고 require()함수로 import하는 방식이다. 주로 서버 사이드 플랫폼인 Node.js 환경에서 주로 사용된다.

### CommonJS
```javascript
//math.js
export function add(a,b){
    return a+b;
}
```

```javascript
//app.js
const math = require('./math.js');
math.add(10,20);
```

### ES2015 표준 모듈 시스템
```javascript
//math.js
export function add(a,b){
    return a+b;
}
```

```javascript
//app.js
import {add} from './math.js';
add(10,20);
```
`export` 구문으로 모듈을 만들고 `import` 구문으로 가져올 수 있다.

이러한 방식은 모든 브라우저에서 지원하지 않는다. 따라서 웹팩과 같은 모듈 번들러를 사용해야한다.

---

## 웹팩사용방법
웹팩은 여러개의 파일을 하나로 합쳐주는 번들러(bundler)이다. 웹팩을 사용하면 자바스크립트뿐만 아니라 css, html, 이미지 등 모든 파일을 모듈로 관리할 수 있다.

웹팩으로 간단하게 작업을 해보자.

먼저 웹팩과 웹팩 터미널 도구인 cli를 설치한다.

```shell
npm install -D webpack webpack-cli
```

root 디렉토리에 `webpack.config.js` 파일을 생성한다.

```javascript
//webpack.config.js
const path = require('path');

module.exports = {
    mode: 'development',
    entry: './src/index.js',
    output: {
        filename: '[name].js',
        path: path.resolve(__dirname, './dist'),
    },
};
```

- `mode`는 웹팩의 모드를 설정한다. `development`로 설정하면 개발용으로, `production`으로 설정하면 배포용으로 빌드된다.
- `entry`는 웹팩이 빌드할 파일인 진입점을 지정한다.
- `output`은 웹팩이 빌드한 결과물을 저장할 경로와 파일명을 지정한다.
    - [name]은 entry에 지정한 파일명을 그대로 사용한다.
    - [hash]는 웹팩이 빌드할 때마다 고유한 해시값을 붙여준다.

package.json에 빌드 스크립트를 추가한다.

```json
//package.json
{
    "scripts": {
        "build": "webpack"
    }
}
```

이제 `npm run build` 명령어를 실행하면 웹팩이 빌드를 시작한다.

---

## 웹팩 로더
웹팩은 자바스크립트 파일 뿐만 아니라 css, html, 이미지 등 모든 파일을 모듈로 관리할 수 있다.
하지만 웹팩은 자바스크립트 파일만 이해할 수 있기 때문에 css나 html, 이미지 파일을 자바스크립트 파일로 변경해야한다. 이때 사용하는 것이 로더이다.

자주 사용하는 로더
- css-loader : css 파일을 자바스크립트 파일로 변경한다.
- style-loader : 자바스크립트로 변경된 스타일을 동적으로 돔에 추가해준다. 주로 css-loader와 함께 사용한다.
- file-loader : 파일을 모듈로 사용할 수 있게 url 경로를 변경한다.
- url-loader : 파일을 모듈로 사용할 수 있게 url 경로를 변경하고 파일을 base64로 인코딩한다.

### css-loader
```shell
npm install -D css-loader
```

웹팩은 모두 모듈로 바라보기 때문에 자바스크립트 뿐만 아니라 스타일시트도 import 구문으로 불러올 수 있다.

```javascript
import './style.css';
```

```css
// style.css
body {
    background-color: red;
}
```

```javascript
//webpack.config.js
module.exports = {
    {...}
  module: {
    rules: [
      {
        test: /\.css$/, // .css 확장자로 끝나는 모든 파일
        use: ["css-loader"], // css-loader를 적용한다
      },
    ],
  },
};
```
웹팩은 entry에서 모듈을 검색하다가 css 파일을 찾으면 css-loader를 적용한다.

---

### style-loader
모듈로 변경된 스타일 시트는 돔에 추가되어야 브라우저가 해석한다.
css-loader는 css 파일을 자바스크립트 파일로 변경할 뿐 돔에 추가하지는 않는다. 따라서 style-loader를 추가해야한다.
```shell
npm install -D style-loader
```

```javascript
module.exports = {
  module: {
    rules: [
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader"],
      },
    ],
  },
};
```
style-loader를 css-loader보다 앞에 적용한다. 로더는 배열로 설정하면 뒤 -> 앞 순서대로 로더가 작동한다.

---

### file-loader
css 뿐만 아니라 소스코드에서 사용하는 모든 파일들을 모듈로 사용할 수 있게 할 수 있다.

```shell
npm install -D file-loader
```

```javascript
module.exports = {
  module: {
    rules: [
      {
        test: /\.(png|jpe?g|gif)$/i, // i는 대소문자 구분없이, 확장자들
        loader: "file-loader",
        options: {
          publicPath: "./dist/", // prefix를 아웃풋 경로로 지정
          name: "[name].[ext]?[hash]", // 파일명 형식
        },
      },
    ],
  },
};
```
옵션으로 경로를 지정할 수 있다. `publicPath`는 파일을 참조하는 경로를 지정한다. `name`은 파일명 형식을 지정한다.

---

### url-loader
파일을 base64로 인코딩하여 문자열 형태로 변환한다. 파일 크기가 작은 파일들은 문자열로 변환하여 파일을 요청하는 횟수를 줄일 수 있다.

```shell
npm install -D url-loader
```

```javascript
module.exports = {
  module: {
    rules: [
      {
        test: /\.(png|jpe?g|gif)$/i,
        loader: "url-loader",
        options: {
          publicPath: "./dist/",
          name: "[name].[ext]?[hash]",
          limit: 5000, // 5kb 미만 파일만 data url로 처리
        },
      },
    ],
  },
};
```

---

file-loader와 url-loader는 v5부터 기본적으로 제공하며, `asset`이라는 키워드로 사용할 수 있다.

```javascript
module.exports = {
  module: {
    rules: [
      {
        test: /\.(png|jpe?g|gif)$/i,
        type: "asset/resource", // file-loader
        generator: {
          filename: "[name][ext]?[hash]", // [name]은 파일명, [ext]는 확장자
        },
      },
      {
        test: /\.(png|jpe?g|gif)$/i,
        type: "asset/inline", // url-loader
        generator: {
          filename: "[name][ext]?[hash]",
        },
      },
      {
        test: /\.(png|jpe?g|gif)$/i,
        type: "asset", // 기본값은 8kb 미만은 inline, 8kb 이상은 resource
        generator: {
          filename: "[name][ext]?[hash]",
        },
      },
    ],
  },
};
```

---

## 웹팩 플러그인
로더는 파일을 해석하고 변환하는 과정에 관여하지만 플러그인은 해당 결과물의 형태를 바꾸는 역할을 한다. 로더는 파일 단위로 처리하는 반면 플러그인은 번들된 결과물을 처리한다.
번들된 자바스크립트를 난독화 한다거나, 특정 텍스트를 추출할 수 있는 용도로 사용한다.

자주 사용하는 플러그인
- BannerPlugin : 결과물에 빌드 정보나 버전같은 정보를 추가할 수 있다.
- DefinePlugin : 환경변수를 설정한다.
- HtmlWebpackPlugin : HTML 파일을 후처리한다.
- CleanWebpackPlugin : 이전 빌드 결과물을 제거한다.
- MiniCssExtractPlugin : CSS 파일을 별도로 추출한다.

---

### BannerPlugin
```javascript
const webpack = require("webpack");

module.exports = {
  plugins: [
    new webpack.BannerPlugin({
      banner: () => `빌드 날짜: ${new Date().toLocaleString()}`,
    }),
  ],
};
```

---

### DefinePlugin
개발환경과 운영환경으로 나누어서 작업할 때 환경변수를 설정할 수 있다.
환경에 의존적인 정보를 소스가 아닌 환경 변수로 관리하면 소스코드를 더욱 안전하고 편리하게 관리할 수 있다.

```javascript
const webpack = require("webpack");

module.exports = {
  plugins: [
    new webpack.DefinePlugin({
      VERSION: JSON.stringify("v.1.2.3"),
      PRODUCTION: JSON.stringify(false),
      MAX_COUNT: JSON.stringify(999),
      "api.domain": JSON.stringify("http://dev.api.domain.com"),
    }),
  ],
};
```

---

### HtmlWebpackPlugin
```shell
npm install -D html-webpack-plugin
```

```javascript
const HtmlWebpackPlugin = require("html-webpack-plugin");

module.exports = {
  entry: 'index.js',
  output: {
    path: path.resolve(__dirname, './dist'),
    filename: 'index_bundle.js',
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "./src/index.html", // 템플릿 경로를 지정
      minify:
        process.env.NODE_ENV === "production"
          ? {
              // 빌드 모드가 production일 때만 사용
              collapseWhitespace: true, // 빈칸 제거
              removeComments: true, // 주석 제거
            }
          : false,
    }),
  ],
};
```

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>webpack App</title>
  </head>
  <body>
    <script src="index_bundle.js"></script>
  </body>
</html>
```
script 태그에 번들링된 결과물을 자동으로 추가해준다. 웹팩 엔트리가 여러개일 경우 여러개의 script 태그를 추가해준다.

---

### CleanWebpackPlugin
```shell
npm install -D clean-webpack-plugin
```

```javascript
const { CleanWebpackPlugin } = require("clean-webpack-plugin");

module.exports = {
  plugins: [new CleanWebpackPlugin()],
};
```

---

### MiniCssExtractPlugin
스타일 시트가 점점 많아짐에 따라 하나의 자바스크립트로 만들면 부담이 될 수 있다.
번들 결과물에서 스타일시트 코드만 따로 분리하여 별도의 css파일로 만들어주는 플러그인이다.

```shell
npm install -D mini-css-extract-plugin
```

```javascript
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

module.exports = {
  module: {
    rules: [
      {
        test: /\.css$/,
        use: [MiniCssExtractPlugin.loader, "css-loader"],
      },
    ],
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: "[name].css",
    }),
  ],
};
```

운영 환경에서는 `MiniCssExtractPlugin.loader`를 사용해 스타일시트를 별도의 파일로 분리한다. 개발 환경에서는 `style-loader`를 사용해 동적으로 돔에 추가한다.

---

웹팩의 로더와 플러그인의 원리, 사용방법에 대해서 알아보았다.

우리가 편리하고 쉽게 사용하는 Create-React-App는 웹팩으로 빌드된 결과물을 제공해준다.
하지만 기본적인 웹팩으로 설정되어있고, 직접 커스텀하려면 eject를 해야한다.

이번 기회에 웹팩의 원리와 기본적인 사용방법을 알아보았다.
19:Te9a,
### React Native geolocation

사이드 프로젝트에 위치정보를 받아와야 하는 기능이 필요해 지오로케이션을 받아 오도록 했다.

### 설치

https://www.npmjs.com/package/react-native-geolocation-service

```bash
yarn add react-native-geolocation-service
```

---

### IOS
- 먼저 xcode를 열고 swift 파일을 생성해준다.

<div style={{ display: "flex", gap: '10px' }}>
    <img src="/assets/blog/javaScript/rn-geolocation.png" width="49%" style={{ maxWidth: '40%'}} alt="post image"/>
    <img src="/assets/blog/javaScript/rn-geolocation-2.png" width="49%" style={{ maxWidth: '59%'}} alt="post image"/>
</div>

프로젝트 폴더에 swift 파일을 생성해주고 Create Bridging Header 를 선택해준다.

---

- 디바이스에서 위치정보를 받아오려면 권한 설정이 필요하다.

```
// ios/[projectName]/info.plist

<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>서비스를 제공하는 업체 위치를 확인을 위한 위치기반 정보 서비스를 이용할 수 있습니다.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>서비스를 제공하는 업체 위치를 확인을 위한 위치기반 정보 서비스를 이용할 수 있습니다.</string>
<key>NSLocationWhenInUseUsageDescription</key>
<string>서비스를 제공하는 업체 위치를 확인을 위한 위치기반 정보 서비스를 이용할 수 있습니다.</string>
```

---

<div style={{ display: "flex", gap: '10px' }}>
    <img src="/assets/blog/javaScript/rn-geolocation-3.png" width="49%" style={{ maxWidth: '40%'}} alt="post image"/>
    <img src="/assets/blog/javaScript/rn-geolocation-4.png" width="49%" style={{ maxWidth: '59%'}} alt="post image"/>
</div>

- 백그라운드에서도 위치정보를 가져오려면 워크스페이스에서 위와 같이 Location updates에 체크해 설정한다.

---

### Android

- 안드로이드도 마찬가지로 권한 설정이 필요하다.

```xml
// android/app/src/main/AndroidManifest.xml

<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
```

---

### 사용법

```tsx
  useEffect(() => {
    if (Platform.OS === 'ios') {
      Geolocation.requestAuthorization('always');
    } else {
      PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION,
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      ]);
    }
  }, []);
```

- requestAuthorization로 위치정보 권한을 요청합니다.

---

### 가장 많이 쓰이는 세가지 API

- getCurrentPosition(successCallback, ?errorCallback, ?options) - 최신 위치정보 호출 (한번)
- watchPosition(successCallback, ?errorCallback, ?options) - 지속적으로 호출
- clearWatch(watchId)

```tsx
import Geolocation from 'react-native-geolocation-service';

const MyApp = () => {
    const [location, setLocation] = useState<ILocation | undefined>(undefined);

    useEffect(() => {
        const _watchId = Geolocation.watchPosition(
          position => {
            const {latitude, longitude} = position.coords;
            setLocation({latitude, longitude});
          },
          error => {
            console.log(error);
          },
          {
            enableHighAccuracy: true,
            distanceFilter: 0,
            interval: 5000,
            fastestInterval: 2000,
          },
        );

        return () => {
          if (_watchId) {
            Geolocation.clearWatch(_watchId);
          }
        };
      }, []);

    return <></>;
}

```

다음 포스팅에서는 받아온 위치정보를 webview로 넘겨주는 방법에 대해 알아보자!


1a:T9c4,
### 딥링크
- 딥링크는 모바일에서 특정 페이지에 도달 할 수 있는 링크를 의미한다.
- 웹이나 sns등 링크를 클릭했을때 해당 어플리케이션 앱으로 바로 이동하는데, 이런 방식을 모바일 딥링크라 하고 특정한 앱 스크린으로 이동하는 것

- 딥링크는 URL 스킴, https://, 두가지 형태를 지원한다.
- ex) `app://example.my.app`, `https://www.example.com`

```shell
yarn add @react-native-firebase/dynamic-links
```

```jsx
import { Linking } from 'react-native';
import dynamicLinks from '@react-native-firebase/dynamic-links';
```


### ios

ios > [프로젝트] > AppDelegate.mm

```swift
#import <React/RCTLinkingManager.h>

{...}

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
  return [RCTLinkingManager application:application openURL:url options:options];
}
```

xcode로 가 Identifier 프로젝트에 Bundle ID를 넣고,
URL Schemes에 프로토콜을 정의한다.

### android

android > app > src > main > AndroidManifest.xml

```xml
  <intent-filter>
    <action android:name="android.intent.action.MAIN" />
    <category android:name="android.intent.category.LAUNCHER" />
  </intent-filter>

  <intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data
      android:host="example.com"
      android:pathPrefix="/"
      android:scheme="https" />
  </intent-filter>
```


### URL 처리

```jsx
const handleDynamicLink = async () => {
  const initialLink = await dynamicLinks().getInitialLink();
  if (initialLink) {
    console.log('initialLink', initialLink);
  }
};

useEffect(() => {
  handleDynamicLink();
}, []);
```

### WebView 이슈

앱이 죽어있는 상태로 외부에서 딥링크를 클릭했을 때 앱이 켜지고 해당 페이지로 이동하는데, 이때 WebView가 렌더링 되지 않는 이슈가 있다.

```jsx
// 앱이 처음 시작시 초기화
useEffect(() => {
  const getInitURL = async () => {
    const initURL = await Linking.getInitialURL();
    if (initURL) {
      ...process
    }
  };
  getInitURL();
}, []);

// 앱이 열려있는 상태
useEffect(() => {
  Linking.addEventListener('url', e => {
      if(e.url){
          ...process
      }
  });
  return () => Linking.removeAllListeners('url');
}, [])
```
1b:T2147,
이전에 [스벨트킷으로 블로그 만들어보기](https://wonbeenna.github.io/blog/javaScript/svelte-blog) 에서 svelte kit으로 블로그를 만들었었다.

그때는 svelte 공부겸 블로그를 만들었지만, 업무에서 주로 사용하는 스택인 react와 next.js를 사용하여 블로그를 만들어보려고 한다.

### 시작
---
```shell
npx create-next-app <project-name>
```

next.js 프로젝트를 생성한다.

### 라우팅
---
<img src="/assets/blog/javaScript/route.png" style={{
    maxWidth: "300px",
    height: "auto"
}} alt="next-blog-route" />

app 폴더 구조는 위와 같다.

- root layout을 만들어 Header, Footer를 구성한다.
- page/[page]는 블로그의 메인이며 페이지네이션을 위해 동적으로 구성하였다.
- blog/[category]/[slug]는 카테고리별로 블로그를 구분하고, slug를 통해 각 post를 구분한다.

### 블로그 포스트

root layout을 만들었으니, 이제 블로그 포스트를 만들어보자.

root 디렉토리에 _posts폴더를 만들고 그 안에 markdown 파일을 만든다.


```shell
npm install gray-matter
```

gray-matter는 markdown 파일의 front matter를 파싱하는 라이브러리이다.

```ts
import path from 'path';
import * as fs from 'fs';
import matter from 'gray-matter';
import { getSerialize } from '@/utils/sirialize';

export const POSTS_PATH = path.join(process.cwd(), '_posts');

export const postFilePaths = fs.readdirSync(POSTS_PATH).filter((path) => /\.mdx?$/.test(path));

export const getAllPost = (
  category?: string,
  paging: { page: string; limit?: string } = {
    page: '1',
    limit: '10'
  }
) => {
  let total = postFilePaths.length;
  let posts = postFilePaths
    .map((filePath) => {
      const source = fs.readFileSync(path.join(POSTS_PATH, filePath));
      const { content, data } = matter(source);
      const slug = filePath.replace(/\.mdx?$/, '');

      return {
        content,
        data,
        slug
      };
    })
    .sort((a, b) => {
      return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
    });

  if (category) {
    posts = posts.filter((post) => post.data.category === category);
    total = posts.length;
  }

  if (!paging.page) {
    paging.page = '1';
    paging.limit = '10';
  }

  if (paging.limit === '-1') {
    return {
      posts,
      total
    };
  }

  const { page = '1', limit = '10' } = paging;
  const offset = (+page - 1) * +limit;

  posts = posts.slice(offset, offset + +limit);

  return {
    posts,
    total
  };
};
```

file path를 통해 _posts폴더 내 markdown 파일을 읽어오고, gray-matter를 통해 front matter를 파싱한다.

메인과 blog 페이지를 구성하기위해 getAllPost 함수를 만들었고, 각각의 블로그들은 getPost 함수를 통해 가져온다.

```ts
export const getPost = async (slug: string) => {
  const allPost = getAllPost(undefined, {
    page: '1',
    limit: '-1'
  });

  const index = allPost.posts.findIndex((post) => post.slug === slug);
  const prevPost = allPost.posts[index + 1];
  const nextPost = allPost.posts[index - 1];

  const source = fs.readFileSync(path.join(POSTS_PATH, `${slug}.mdx`));

  const { content, data } = matter(source);
  const mdx = await getSerialize(content, data);

  return {
    mdx,
    content,
    data,
    slug,
    prevPost: {
      slug: prevPost?.slug,
      title: prevPost?.data.title,
      category: prevPost?.data.category
    },
    nextPost: {
      slug: nextPost?.slug,
      title: nextPost?.data.title,
      category: nextPost?.data.category
    }
  };
};
```

```shell
npm i next-mdx-remote
```

next-mdx-remote는 mdx 파일을 html로 변환해주는 라이브러리이다.

위 코드에서 getSerialize 함수는 mdx 파일을 html로 변환해주는 함수이다.

html로 변환하는데 있어 remark와 rehype를 사용할 수 있다.

```ts
import { serialize } from 'next-mdx-remote/serialize';
import remarkGfm from 'remark-gfm';
import rehypePrism from 'rehype-prism-plus';

export const getSerialize = async (content: string, data: any) => {
  return await serialize(content, {
    mdxOptions: {
      remarkPlugins: [remarkGfm],
      rehypePlugins: [rehypePrism]
    },
    scope: data
  });
};
```

```tsx
<MDXRemote {...source} components={components} />
```

위에서 변환된 html을 MDXRemote 컴포넌트를 통해 렌더링한다.

### 카테고리
---

카테고리 별로 필터하기위해 카테고리도 따로 받아와야 했다.
각각의 post들을 읽고 중복되지 않은 카테고리들만 가져오는 함수를 만들었다.

```ts
import { getAllPost } from '@/utils/getPost';

export const getCategories = (): {
  title: string;
  count: number;
}[] => {
  const posts = getAllPost(undefined, { page: '1', limit: '-1' });

  let uniqueCategories: any = {};

  posts.posts.forEach((post) => {
    if (uniqueCategories.hasOwnProperty(post.data.category)) {
      uniqueCategories[post.data.category].count += 1;
    } else {
      uniqueCategories[post.data.category] = {
        title: post.data.category,
        count: 1
      };
    }
  });

  return Object.values(uniqueCategories).sort((a, b) => a.title > b.title);
};

```

### 페이지
---
위에서 구성한 함수들을 페이지에서 사용해보자.

```tsx
export const generateStaticParams = async () => {
  const posts = getAllPost(undefined, {
    page: '1',
    limit: '-1'
  });

  return Array.from({ length: Math.ceil(posts.total / 10) }, (_, i) => {
    return {
      page: (i + 1).toString()
    };
  });
};

const Page = ({ params }: { params: { page: string } }) => {
  return <PostListContainer page={params.page} />;
};

export default Page;
```

```tsx
// blog/[category]/[slug].tsx
export const generateStaticParams = async () => {
  const posts = getAllPost(undefined, {
    page: '1',
    limit: '-1'
  });

  return posts.posts.map((post) => {
    return {
      slug: post.slug,
      category: post.data.category
    };
  });
};
```

app 라우트에서 SSG를 사용하기 위해 generateStaticParams 함수가 필요했다.
PostListContainer 컴포넌트를 통해 각 page들을 렌더링 하였고, generateStaticParams 함수를 통해 페이지네이션을 위한 params들을 생성하였다.

### SEO
---

seo를 위해 meta 태그와 sitemap, robots를 생성했다.

next 13 에서는 간단하게 위 세가지를 구성할 수 있었다.

먼저 sitemap.ts를 app 폴더에 만들고

```ts
import { getAllPost } from '@/utils/getPost';
import { MetadataRoute } from 'next';

const defaultUrl = process.env.NEXT_PUBLIC_BASE_URL;
const pageRoutes = [`${defaultUrl}`, `${defaultUrl}/blog`, `${defaultUrl}/about`];

export default function sitemap(): MetadataRoute.Sitemap {
  const posts = getAllPost(undefined, {
    page: '1',
    limit: '-1'
  });

  const defaultRoutes: MetadataRoute.Sitemap = pageRoutes.map((route) => {
    return {
      url: route,
      lastModified: new Date().toISOString(),
      changeFrequency: 'weekly',
      priority: 1
    };
  });

  const postRoutes: MetadataRoute.Sitemap = posts.posts.map((post) => {
    return {
      url: `${defaultUrl}/blog/${post.data.category}/${post.slug}`,
      lastModified: new Date(post.data.date).toISOString(),
      changeFrequency: 'weekly',
      priority: 1
    };
  });

  return [...defaultRoutes, ...postRoutes];
}
```
처럼 함수를 만들면 sitemap이 생성된다.

robots도 마찬가지로 app 폴더에 robots.ts를 만들고

```ts
import { MetadataRoute } from 'next';

export default function robots(): MetadataRoute.Robots {
  return {
    rules: {
      userAgent: '*',
      allow: '/'
    },
    sitemap: 'https://wonbeenna.github.io/sitemap.xml'
  };
}
```

위와 같이 작성하면 된다.

metadata는 각 페이지에서 generateMetadata 함수를 통해 생성하면 된다.

```ts
export const generateMetadata = async ({ params }: { params: { page: string } }) => {
  return {
    title: `Been blog - ${params.page}`,
    openGraph: {
      ...defaultOpenGraph,
      title: `Been blog - ${params.page}`,
      description: `Been dev-note - ${params.page}`,
      url: `${process.env.NEXT_PUBLIC_BASE_URL}/page/${params.page}`
    }
  };
};
```

### 댓글
---

댓글은 giscus를 사용했다.

giscus는 github Discussions으로 댓글로 사용할 수 있게 해주는 라이브러리이다.

```shell
npm i @giscus/react
```

[giscus](https://giscus.app/ko)

위 문서에 쉽게 설명되어 있으니 생략!





1c:T6ae,
JSON 웹 토큰(JWT)

일반적으로 **헤더.페이로드.서명** 으로 구성되어 있다.

1.헤더 - 어떤 알고리즘으로 암호화 할것인지

2.데이터 - 전달하려는 정보, 사용자의 id, name 등

3\. 서명 - 서버가 지정한 secret key로 암호화 시켜 토큰을 변조하기 어렵게 만듬

이 세 부분을 Base64url로 인코딩해 

```
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI
```

위와 같은 형태로 파싱해 사용한다.

jwt 데이터 부분에서 정보를 가져와 사용할 수 있는데, decoding 해주어야 한다.

```javascript
export const decodeJwtResponse = (token: string) => {
  let base64Url = token.split('.')[1]
  let base64 = base64Url?.replace(/-/g, '+')?.replace(/_/g, '/')
  let jsonPayload = decodeURIComponent(
    atob(base64)
      .split('')
      .map(function (c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)
      })
      .join('')
  )

  return JSON.parse(jsonPayload)
  let base64Payload = token.split('.')[1]

  let payload = Buffer.from(base64Payload, 'base64')
  return JSON.parse(payload.toString())
}
```

atob 함수는 node에서 더이상 지원하지 않아 아래로 수정

```javascript
export const decodeJwtResponse = (token: string) => {
  let base64Payload = token.split('.')[1]

  let payload = Buffer.from(base64Payload, 'base64')

  return JSON.parse(payload.toString())
}
```

token을 split해 1번째 데이터에 해당하는 부분을 가져온 다음

node에서 지원하는 Buffer 객체를 사용해 바이너리로 변환

base64로 인코딩한 후 JSON으로 파싱한다
1d:Tfb3,
얼마전 기업과제를 진행했다. Audio 객체를 이용한 음악 재생이었다.

https://developer.mozilla.org/ko/docs/Web/API/Web_Audio_API/Using_Web_Audio_API

## Audio 객체
웹에서 음악을 재생하기 위해서는 new Audio 객체를 생성하거나, `<audio>` 태그를 사용해 Audio 객체를 가져올 수도 있다.

Audio 객체는 음악을 재생하고, 일시정지하고, 음악의 길이를 구하는 등의 기능을 제공한다.

Audio 객체는 다음과 같이 생성한다.

```jsx
let audio = new Audio(url);
```

```jsx
<audio src={url} />;
```

과제를 제출하고 알게 되었는데, new Audio 객체를 사용하면 화면 밖에서도 audio를 다룰 수 있기때문에 `audio`태그를 사용할 필요가 없었다.

둘중 하나만 사용해 Audio를 다룰 수 있는 객체를 가져오면 된다.

```javascript
let audio = document.querySelector('audio');
audio.play();
audio.pause();
```

과제에서는 new Audio를 사용해 구현 하였다.
```jsx
  useEffect(() => {
    setAudio(new Audio(url));
}, [url, setAudio]);
```
먼저 server에서 받아온 Url을 state에 담아 주었고

```jsx
  useEffect(() => {
    if (audio && isPlaying) {
        audio?.play();
    }
}, [audio, isPlaying]);
```

리스트에서 음악을 선택하면 `isPlaying`이 true가 되고, `audio`가 생성되면 `audio.play()`를 실행한다.

재생과 일시정지도 추가가 되어야 했다.

```jsx
const handlePlayButton = () => {
    if (audio?.paused) {
        return audio.play();
    }
    return audio?.pause();
}
```
음악이 정지중일땐 play, 음악이 재생중일땐 pause를 실행한다.

---

음악이 재샐중일때 progress bar도 구현이 필요했다.

```jsx
const [rangeValue, setRange] = useState<number>(0);
const [currentTime, setCurrentTime] = useState<string>('00:00');
const [duration, setDuration] = useState<string>('00:00');

<progress
    className="progress"
    value={Math.floor(rangeValue)}
    max="100"
    aria-valuemin={0}
    aria-valuemax={100}
    aria-valuenow={Math.floor(rangeValue)}
    onClick={handleChangeProgressRange}
/>
```

`rangeValue`는 progress bar의 value값을 나타내고, `currentTime`는 현재 재생중인 시간을 나타낸다.

`duration`는 음악의 전체 길이를 나타낸다.

재생시간과 음악의 전체 길이가 `00:00`으로 표시되었어야했기 때문에 format함수를 만들었고, eventListener를 통해 재생시간과 음악의 전체 길이를 구했다.

```js
export const getMusicTimeFormat = (time = 0) => {
  let minutes = Math.floor((time % 3600) / 60)
    .toString()
    .padStart(2, '0');
  let seconds = Math.floor(time % 60)
    .toString()
    .padStart(2, '0');

  return minutes + ':' + seconds;
};
```
```jsx
  useEffect(() => {
    audio?.addEventListener('timeupdate', () => {
        setDuration(getMusicTimeFormat(audio.duration || 0));
        setCurrentTime(getMusicTimeFormat(audio.currentTime));
        setRange((audio?.currentTime / audio?.duration || 0) * 100);
    });
}, [audio]);
````

`timeupdate`이벤트는 음악이 재생중일때마다 발생한다.

```js
  const handleChangeProgressRange = (e: React.MouseEvent<HTMLProgressElement>) => {
    if (audio) {
        let clickPosition = e.pageX - e.currentTarget.offsetLeft;
        let clickedValue = (clickPosition * e.currentTarget.max) / e.currentTarget.offsetWidth;
        audio.currentTime = (parseInt(String(clickedValue), 10) / 100) * audio.duration;
        setRange(parseInt(String(clickedValue), 10));
    }
};
```
progressbar를 클릭했을 때는 해당 위치부터 audio를 재생해야했다.
`clickPosition`은 progressbar를 클릭한 위치를 나타내고, `clickedValue`는 progressbar의 value값을 나타낸다.

- e.pageX = 브라우저 상의 마우스 클릭 위치
- e.currentTarget.offsetLeft = progressbar의 x축(왼쪽) 위치
- e.currentTarget.max = progressbar의 최대값
- e.currentTarget.offsetWidth = progressbar의 전체 너비


1e:Te25,
### 디바운싱과 쓰로틀링


- 디바운싱: 연속으로 호출되는 함수들 중 가장 마지막 함수(또는 제일 처음)만 호출하도록 하는 것
- 쓰로틀링: 함수가 연속적으로 실행되는 경우 현재 실행되고 있는 함수가 없는 경우에만 함수를 실행함

예를들어 검색을 요구하는 API에 "test"를 검색한다고 가정한 경우, 일반적인 경우에는 t, e, s, t 각 글자를 입력할 때 마다 API가 호출이 된다.

이런 경우 불필요한 요청이 서버에 부담을 줄 수가 있다.

이 때 디바운싱을 사용하게 된다면, 가장 마지막인 글자가 입력되고, 하나의 단어가 완성되었을때 API에 요청을 할 수 있다.

쓰로틀링인 경우에는 t를 입력했을 때 API요청이 발생하고, 이후 일정 시간동안은 아무 응답도 받지 않는다.
정해진 시간이 모두 지나고난 뒤에 마지막으로 입력된 글자까지 요청이 가게 된다.
즉 실행 횟수에 제한을 거는 것이다.

### 디바운싱
```tsx
import { useEffect, useState } from 'react'

function useDebounce<T>(value: T, delay?: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value)

  useEffect(() => {
    const timer = setTimeout(() => setDebouncedValue(value), delay || 500)

    return () => {
      clearTimeout(timer)
    }
  }, [value, delay])

  return debouncedValue
}

export default useDebounce
```
```js
import { ChangeEvent, useEffect, useState } from 'react'
import { useDebounce } from 'usehooks-ts'

export default function Component() {
  const [value, setValue] = useState<string>('')
  const debouncedValue = useDebounce<string>(value, 500)

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    setValue(event.target.value)
  }

  // Fetch API (optional)
  useEffect(() => {
    // Do fetch here...
    // Triggers when "debouncedValue" changes
  }, [debouncedValue])

  return (
    <div>
      <p>Value real-time: {value}</p>
      <p>Debounced value: {debouncedValue}</p>

      <input type="text" value={value} onChange={handleChange} />
    </div>
  )
}
```
출처: [react-hook](https://usehooks-ts.com/react-hook/use-debounce)

input feild에 값이 들어갈 때마다 onChange 이벤트가 트리거되고, hook으로 전달받은 value가 clearTimeout으로 초기화된 useEffect내부 setTimeout의 delay만큼 시간이 지난 후 debouncedValue로 return 된다.

### 쓰로틀링
```js
import { useEffect, useRef, useState } from 'react';

const useThrottle = (value, limit) => {
    const [throttledValue, setThrottledValue] = useState(value);
    const lastRan = useRef(Date.now());

    useEffect(() => {
        const handler = setTimeout(() => {
            if (Date.now() - lastRan.current >= limit) {
                setThrottledValue(value);
                lastRan.current = Date.now();
            }
        }, limit - (Date.now() - lastRan.current));

        return () => {
            clearTimeout(handler);
        };
    }, [value, limit]);

    return throttledValue;
};

export default useThrottle;
```
```js
const [value, setValue] = useState('');
{...}
const throttleText = useThrottle(value, 1000);
```
hook이 실행되면 lastRan과 현재시간을 비교한다.

만약 (Date.now() - lastRan.current) 즉, value가 입력된 시간이 limit보다 크다면 value를 throttledValue로 return하고, lastRan을 현재시간으로 초기화한다.

만약 value가 입력된 시간이 limit보다 작다면 limit - value가 입력된 시간이 시간이 지난 후에 throttledValue로 return한다.




1f:Tc4f,
## GraphQL 사용

Apollo client를 사용합니다.

Apollo Client는 GraphQL을 사용해 로컬 및 원격 데이터를 모두 관리할 수 있습니다. (상태 관리 라이브러리)

---

### React에 Apollo Client 연결
```shell
npm install @apollo/client graphql
```

index.ts 또는 App.ts 에서 작업을 진행합니다.
```ts
const client = new ApolloClient({
  uri: "https://~/graphql",
  cache: new InMemoryCache(),
});
```

다음과 같이 ApolloClient를 초기화 하고 `uri`와 `cache` 인스턴스를 전달합니다.

uri에 서버주소를 작성합니다. endpoint를 따로 지정하지 않았다면 `/graphql`이 됩니다.

사내에서는 `proxy`를 사용하기 때문에 `endpoint`를
```ts
const client = new ApolloClient({
  uri: '/api/graphql',
  cache: new InMemoryCache()
})
```
로 작성해주시면 됩니다.

```ts
function App() {
  return (
{...}
        <ApolloProvider client={client}>
            <DefaultRoutes />
        </ApolloProvider>
{...}
  )
}
```
react app에 전역으로 사용하기 위해서는 `ContextApi`를 사용하는 것 처럼 `ApolloProvider`로 앱을 감싸면 됩니다.

---

### 백엔드 데이터 읽기
이제 `client`는 데이터를 가져올 준비가 되었습니다.

<img src="/assets/blog/javaScript/graphql-2.png" width="49%" alt="post image"/>
<img src="/assets/blog/javaScript/graphql-1.png" width="49%" alt="post image"/>

`playground`에서 정의된 `schema`를 다운로드 받아 프로젝트 `root`에 위치시킵니다.

```ts
// const client = ...

client
  .query({
    query: gql`
      query {
        getAdminOrderProducts {
          data {
            id
            status
          }
        }
      }
    `
  })
  .then((response) => console.log(response))
  .catch((error) => console.log(error))
```

간단하게 불러올 수 있는 방법입니다. playground에 정의된 query를 요청하면
타입과 함께 요청한 쿼리들이 response에 담깁니다.

<img src="/assets/blog/javaScript/graphql-3.png" width="49%" alt="post image"/>
<img src="/assets/blog/javaScript/graphql-4.png" width="49%" alt="post image"/>

필드별로 분리하여 요청할 수 있습니다.
```ts
import {gql, useQuery} from '@apollo/client'

const ORDER_QUERY = gql`
  query {
    getAdminOrderProducts {
      data {
        id
        status
      }
    }
  }
`

  const {loading, error, data} = useQuery(ORDER_QUERY)
```

`variables`로 `arguments`를 지정할 수 있습니다.

`useQuery`에 옵션 `variables`은 GraphQL 쿼리에 전달하려는 모든 매개변수를 포함하는 객체입니다.

아래와 같이 매개변수를 지정할 수 있습니다.
```ts
const ORDER_QUERY = gql`
  query getAdminOrderProducts($start: Int!, $perPage: Int!) {
    getAdminOrderProducts(start: $start, perPage: $perPage) {
      data {
        id
        status
        product {
          id
        }
        createdAt
      }
      total
    }
  }
`

  const {data, loading} = useQuery(ORDER_QUERY, {
    variables: {
      start: 0,
      perPage: 20
    }
  })
```

지금까지는 백엔드의 데이터를 읽는 방법이었습니다.







20:Tc85,
대기열 → 캐싱 → DNS → 라우팅 → ARP → 초기연결 → 컨텐츠 다운로드 → 브라우저 렌더링

이런 과정을 비캡슐화, 캡슐화 과정을 거침

### 대기열

### 캐싱

- 공유프록시캐시
- 브라우저 캐시

요청된 값의 결과값을 저장하고 다시 요청하는 기술

브라우저는 IP주소를 찾기 위해 캐시된 DNS 기록을 확인

### DNS 조회

- 브라우저가 IP 주소를 확인하는 단계
- 도메인 이름과 IP주소를 매핑해주는 서버
- `www.naver.com` ← 반대로 확인
- root (.) → .com → naver.com → `www.naver.com`

### 라우팅

- IP주소를 찾아가는 과정
- 홉 바이 홉 통신

### ARP (**IP 주소를 물리적 네트워크 주소로 대응(bind)시키기 위해 사용되는 프로토콜)**

- ARP를 통해 MAC주소를 찾아 MAC주소를 기반으로 통신
- 논리적 주소 → 물리적 주소
- 장치 ↔ 장치 (IP주소를 → MAC주소)
- 실제 서버에 도달

### 초기 연결

### 콘텐츠 다운로드

- 브라우저는 서버로부터 응답을 수신

### 브라우저 렌더링

- DOM 트리 구축
- HTML, CSS가 각각 파서로 해석되다가 DOM트리를 구축한다.
- html, body, div 등 tree형태로
- 렌더트리와 렌더레이어 생성
- CSSOM 트리가 생성되고 미리 만들어 놓은 DOM트리 내에 있는 노드와 함께 스타일이 생성
- 렌더레이어 대상으로 Layout 설정
- 렌더레이어 대상으로 칠하기 (paint 과정)
- 레이어 합치기
- 각각의 레이어들이 합쳐짐

일반적인 모니터는 초당 60FPS, 브라우저도 초당 60FPS로 화면을 그리게 된다.

여기서 브라우저가 60FPS 아래로 그리게 된다면 쟁크 현상이 발생함.

<img src="/assets/blog/javaScript/web-optimization6.png" width="100%" alt="web-optimization"/>

1. DOM + CSSOM

<img src="/assets/blog/javaScript/web-optimization7.png" width="100%" alt="web-optimization"/>

1. Render Tree

<img src="/assets/blog/javaScript/web-optimization8.png" width="100%" alt="web-optimization"/>

위 DOM과 CSSOM을 조합해 RenderTree를 만들어 낸다.

1. Layout

<img src="/assets/blog/javaScript/web-optimization9.png" width="100%" alt="web-optimization"/>

위치나 크기를 계산해 화면에 레이아웃을 그린다.

1. Paint

이렇게 그려진 레이아웃위에 색을 채워넣음

1. Composite

<img src="/assets/blog/javaScript/web-optimization10.png" width="100%" height="350" alt="web-optimization"/>

각 레이어들을 합성하는 과정

이 전체의 과정을 Critical Rendering Path, Pixel Pipeline 이라고 부른다.

이 완성된 상태에서 변화가 생긴다면 처음으로 돌아가 다시 이 전체의 과정을 거치게 된다.

- width, height가 변경되면, **1 -> 2 -> 3 -> 4 -> 5** 모두 실행되게 된다 **(Reflow)**
- 크기나 위치가 아니라 color, background-color(색깔)이 변경됐을땐 **1 -> 2 -> 4 -> 5** **(Repaint)**
- transform, opacity 등(GPU가 관여하는 속성) 변경일 때 **1 -> 2 -> 5**

따라서 transform, opacity 등(GPU가 관여하는 속성)을 사용하는게 가장 빠르고 끊김없이 보여줄 수 있다.
21:T1a75,
인증방식에는 대표적으로 두가지가 있다.

제일 많이 사용하는 세션 방식과 토큰 방식

- 인증 -> 유저가 누구인지 확인
- 인가 -> 유저의 요청에 대한 권한을 확인하고 허가

---

### 세션방식
- 로그인 요청 -> 서버에서 세션 key-value로 구분해 정보를 저장
- 서버 -> 클라이언트 측으로 http header cookie에 세션 id를 담아 전달
- 클라이언트 쪽에서 response값으로 cookie에 저장된 세션을 확인할 수 있는데, 브라우저에 저장

세션 방식은 HTTP요청이 노출되어도 세션 자체에는 의미있는 값이 없기 때문에 보안상 유리할 수 있다.

각 사용자마다 고유한 id를 갖고 있기 때문에 매번 회원정보를 확인할 필요가 없다.

서버에 따로 세션 저장소를 두기 때문에 사용자가 많아지면 서버에 부담이 간다.

각 브라우저들은 보안상의 이슈로 서버와 프론트간의 도메인이 같아야 쿠키가 전달된다.

- 프론트 측에서는 Axios 사용시 ```withCredentials: true```설정을 통해 서로 다른 도메인간의 요청에도 credential 정보를 받을 것인지 설정해야 한다.

- 서버 측에서는 응답 헤더의 Access-Control-Allow-Credentials 항목을 true로 설정해야 하고,
응답 헤더의 Access-Control-Allow-Origin의 값을 와일드 카드('*') 제외하고 설정 되어야 한다.

---

우선 localhost와 서버상의 도메인이 달라 proxy 설정을 해줬다.

```ts
// pages/api/[...path].ts
import type { NextApiRequest, NextApiResponse } from "next";
import httpProxyMiddleware from "next-http-proxy-middleware";

export const config = {
  api: {
    externalResolver: true
  },
}

export default (req: NextApiRequest, res: NextApiResponse) => {
    httpProxyMiddleware(req, res, {
        target: process.env.NEXT_PUBLIC_API_URL,
        changeOrigin: true,
        pathRewrite: [
          {
            patternStr: "^/api/",
            replaceStr: "/",
          },
        ],
        cookieDomainRewrite: {
          "*": "localhost",
        },
      })
    };
```

```ts
/** @type {import('next').NextConfig} */
const nextConfig = {
  swcMinify: true,
  reactStrictMode: true,
  compiler: {
    styledComponents: true,
    removeConsole: process.env.NODE_ENV === "production",
  },
  async rewrites() {
    return process.env.NODE_ENV === "production"
      ? [
          {
            source: "/api/:path*",
            destination: `${process.env.NEXT_PUBLIC_API_URL}/:path*`,
          },
        ]
      : [];
  },
{...}
};
```
---
위 처럼 설정해 주니 서버에서 보낸 cookie가 localhost 브라우저에 잘 들어왔다.

여기서 고민했던 부분이 csr환경이 아닌 next의 ssr환경인 프론트측 서버단에서는 유저인증을 어떻게 확인할 것인가 였다.

우선 로그인 상태와 비로그인 상태에서 접근불가능한 페이지 접근시 리다이렉트를 시키는 방법으로 진행했다.

Nextjs middleware는 root폴더에 middleware.ts 파일을 만들어 주면 페이지 라우팅 되기 전에 middleware가 자동으로 실행된다.

Nextjs에서 지원하는 middleware는 들어오는 요청에 따라서 req, res, header를 다시 작성하거나 리디렉션 등을 수정하거나 재작성할 수 있다.
```ts
import type { NextRequest } from "next/server";
import { fetchAuth, inValidateAuth, validateAuth } from "@/lib/validateUser";

const validatedUrl = [
  "/users/sign-in",
  "/users/sign-up/normal",
  "/users/sign-up/social",
  "/users/sign-up/vendor",
  "/users/password/reset",
];

const inValidateUrl = ["/users/my-page"];

export async function middleware(req: NextRequest) {
  const url = req.nextUrl;

  if (validatedUrl.includes(url.pathname)) {
    return await validateAuth(req);
  }

  if (inValidateUrl.includes(url.pathname)) {
    return await inValidateAuth(req);
  }

  return await fetchAuth(req);
}

export const config = {
  matcher: ["/((?!api|_next/static|_next/image|favicon.ico|assets).*)"],
};
```
```ts
import { NextRequest, NextResponse } from "next/server";

export const validateUser = (req: NextRequest) => {
  return fetch("url", {
    method: "get",
    mode: "cors",
    credentials: "same-origin",
    headers: {
      "Content-Type": "application/json",
      cookie: `${req.headers.get("cookie")}`,
    },
  });
};

{...}

export const fetchAuth = async (req: NextRequest) => {
    try {
        const res = NextResponse.next();

        const response = await validateUser(req);
        const data = await response.json();

        if (response.ok) {
            res.cookies.set("user", JSON.stringify(data));
            return res;
        }

        if (!response.ok) {
            res.cookies.delete("user");
            res.cookies.delete("user.sid");
            return res;
        }
    } catch (e) {
        throw new Error("Validate Error");
    }
};
```

처음에 이런식으로 미들웨어를 구현했다. matcher로 페이지단만 확인했고, 페이지 라우팅시 유저 인증에 성공하면 cookie를 통해 유저정보와 세션을 전달했다.

또 인증성공시 접근 x, 비인증시 접근 x 한 url을 확인해 리다이렉트 시키도록 했다.

처음 해봤던 작업이었고, 제대로 구현한지 확신이 들지 않아 코드리뷰를 요청했다.

middleware를 사용하지 않고 hocs를 사용해 auth를 호출하고, axios config에 headers를 전달하는 방법으로 알려주셨다.

```ts
import React from "react";
import { GetServerSideProps, GetServerSidePropsContext } from "next";
import { getAuth } from "@/models/auth";
import merge from "lodash/merge";

const validatedUrl = [
  "/users/sign-in",
  "/users/sign-up/normal",
  "/users/sign-up/social",
  "/users/sign-up/vendor",
  "/users/password/reset",
];

const inValidateUrl = [
  "/users/my-page",
  "/users/my-page/profile",
  "/users/my-page/review",
];

export default function withAuth(getServerSideProps?: GetServerSideProps) {
  return async function (context: GetServerSidePropsContext) {
    const url = context.req.url as string;
    let user = null;
    try {
      const res = await getAuth({ headers: context.req.headers });
      user = res.data;
    } catch (e) {}
    if (inValidateUrl.includes(url) && !user) {
      return {
        redirect: {
          permanent: false,
          destination: "/users/sign-in",
        },
      };
    }
    {...}
    const ret = await getServerSideProps?.(context);
    return merge(ret, { props: { user } });
  };
}
```

middleware는 nextjs에서 서버도 같이 구성해 사용하면 좋을거라고 조언을 주셨다.

```ts
// page/*
{...}

export const getServerSideProps = withAuth();

{...}
```
9:["$","section",null,{"className":"flex flex-col-reverse md:relative md:flex-row","children":[["$","$L17",null,{"isPagination":true,"posts":{"posts":[{"content":"$18","data":{"title":"웹팩 기본 사용법 (1)","date":"$D2023-11-30T00:00:00.000Z","description":"처음 접해보는 웹팩의 원리와 기본 사용 방법","category":"javaScript","titleImage":"/assets/postIcon/webpack-icon.svg"},"slug":"webpack-1"},{"content":"$19","data":{"title":"React Native geolocation","date":"$D2023-10-25T00:00:00.000Z","description":"React Native 위치정보 받아오기","category":"javaScript","titleImage":"/assets/postIcon/logo192.webp"},"slug":"rn-geolocation"},{"content":"$1a","data":{"title":"React Native Deep Linking","date":"$D2023-10-17T00:00:00.000Z","description":"React Native Deep Linking 연결","category":"javaScript","titleImage":"/assets/postIcon/logo192.webp"},"slug":"rn-deep-link"},{"content":"$1b","data":{"title":"Next.js 블로그 만들기","date":"$D2023-10-09T00:00:00.000Z","description":"Next.js로 블로그 만들기","category":"javaScript","titleImage":"/assets/postIcon/Nextjs.svg"},"slug":"next-blog"},{"content":"$1c","data":{"title":"jwt 토큰 decode 하기","date":"$D2023-08-31T00:00:00.000Z","description":"jwt 토큰 decode 함수","category":"javaScript","titleImage":"/assets/postIcon/javascript.webp"},"slug":"jwt-decode"},{"content":"$1d","data":{"title":"Audio객체를 이용한 음악 재생","date":"$D2023-05-27T00:00:00.000Z","description":"Audio객체를 사용한 기업 과제 구현","category":"javaScript","titleImage":"/assets/postIcon/logo192.webp"},"slug":"audio"},{"content":"$1e","data":{"title":"디바운싱과 쓰로틀링","date":"$D2023-05-13T00:00:00.000Z","description":"디바운싱과 쓰로틀링의 차이를 구분하고 hook으로 구현","category":"javaScript","titleImage":"/assets/postIcon/javascript.webp"},"slug":"debouce-throttle"},{"content":"$1f","data":{"title":"GraphQl 써보기(1)","date":"$D2023-04-29T00:00:00.000Z","description":"GraphQl, Apollo Client를 사용","category":"javaScript","titleImage":"/assets/postIcon/graphql.svg"},"slug":"graphql-1"},{"content":"$20","data":{"title":"브라우저에 url을 검색하면?","date":"$D2023-02-25T00:00:00.000Z","description":"사내 스터디","category":"study","titleImage":"/assets/postIcon/javascript.webp"},"slug":"browser"},{"content":"$21","data":{"title":"Next.js middleware와 getServerSideProps","date":"$D2023-02-22T00:00:00.000Z","description":"세션방식의 로그인 인증, middleware와 getServerSideProps를 사용해 구현한 기록","category":"javaScript","titleImage":"/assets/postIcon/Nextjs.svg"},"slug":"next-middleware"}],"total":43},"page":"2"}],["$","ul",null,{"className":"relative top-0 flex h-fit min-w-fit flex-row flex-wrap gap-[20px] py-[20px] pl-0 md:sticky md:top-[100px] md:flex-col md:flex-nowrap md:py-0 md:pl-[30px]","children":[["$","h2",null,{"className":"hidden text-[18px] font-bold md:inline","children":"Category"}],[["$","li","javaScript",{"children":["$","$L4",null,{"className":"text-gray700","href":"/blog/javaScript","children":"javaScript (39)"}]}],["$","li","til",{"children":["$","$L4",null,{"className":"text-gray700","href":"/blog/til","children":"til (2)"}]}],["$","li","study",{"children":["$","$L4",null,{"className":"text-gray700","href":"/blog/study","children":"study (2)"}]}]]]}]]}]
12:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
16:{"metadata":[["$","title","0",{"children":"Been blog - 2"}],["$","meta","1",{"name":"description","content":"Been dev-note - 2"}],["$","meta","2",{"name":"google-site-verification","content":"BirkRt7C7FYMLW96RbXad2EtPdcl0-_ti9xCRkCHa5U"}],["$","meta","3",{"name":"naver-site-verification","content":"58945b2bbe2fe86252fa8c7b204b40f6019920e9"}],["$","link","4",{"rel":"canonical","href":"https://wonbeenna.github.io/page/2"}],["$","meta","5",{"property":"og:title","content":"Been blog - 2"}],["$","meta","6",{"property":"og:description","content":"Been dev-note - 2"}],["$","meta","7",{"property":"og:url","content":"https://wonbeenna.github.io/page/2"}],["$","meta","8",{"property":"og:site_name","content":"Been blog"}],["$","meta","9",{"property":"og:locale","content":"ko_KR"}],["$","meta","10",{"property":"og:image","content":"https://wonbeenna.github.io/favicon.png"}],["$","meta","11",{"property":"og:image:width","content":"800"}],["$","meta","12",{"property":"og:image:height","content":"600"}],["$","meta","13",{"property":"og:image:alt","content":"Been blog"}],["$","meta","14",{"property":"og:type","content":"website"}],["$","meta","15",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","16",{"name":"twitter:title","content":"Been blog - 2"}],["$","meta","17",{"name":"twitter:description","content":"Been dev-note - 2"}],["$","meta","18",{"name":"twitter:image","content":"https://wonbeenna.github.io/favicon.png"}],["$","meta","19",{"name":"twitter:image:width","content":"800"}],["$","meta","20",{"name":"twitter:image:height","content":"600"}],["$","meta","21",{"name":"twitter:image:alt","content":"Been blog"}],["$","link","22",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"192x192"}],["$","link","23",{"rel":"icon","href":"/favicon.ico","sizes":"any"}],["$","link","24",{"rel":"icon","href":"/favicon.png","sizes":"32x32","type":"image/png"}],["$","link","25",{"rel":"apple-touch-icon","href":"/favicon.png","sizes":"32x32","type":"image/png"}]],"error":null,"digest":"$undefined"}
10:{"metadata":"$16:metadata","error":null,"digest":"$undefined"}
