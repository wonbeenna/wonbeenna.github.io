1:"$Sreact.fragment"
2:I[9243,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","177","static/chunks/app/layout-2026af6fce535623.js"],""]
3:I[881,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","177","static/chunks/app/layout-2026af6fce535623.js"],"Providers"]
4:I[6874,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","974","static/chunks/app/page-db833fa3fc4df86a.js"],""]
5:I[3063,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","177","static/chunks/app/layout-2026af6fce535623.js"],"Image"]
6:I[1186,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","177","static/chunks/app/layout-2026af6fce535623.js"],"default"]
7:I[7555,[],""]
8:I[1295,[],""]
a:I[9665,[],"MetadataBoundary"]
c:I[9665,[],"OutletBoundary"]
f:I[4911,[],"AsyncMetadataOutlet"]
11:I[9665,[],"ViewportBoundary"]
13:I[6614,[],""]
:HL["/_next/static/media/47cbc4e2adbc5db9-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/e539936c7dc6b882.css","style"]
:HL["/_next/static/css/2e1c4c7c40082d2a.css","style"]
0:{"P":null,"b":"Zx_IB7Z-QhvPTJ6OPVOmt","p":"","c":["",""],"i":false,"f":[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e539936c7dc6b882.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/2e1c4c7c40082d2a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ko","suppressHydrationWarning":true,"children":[["$","$L2",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-LFDRQZPCBN"}],["$","$L2",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n \n          gtag('config', 'G-LFDRQZPCBN');\n        "}],["$","body",null,{"suppressHydrationWarning":true,"className":"__className_518cef","children":["$","$L3",null,{"children":[["$","header",null,{"className":"sticky top-0 z-10 mx-auto my-0 h-[56px] border-b border-b-gray200 bg-white px-[24px] py-0 dark:bg-darkBg01","children":["$","section",null,{"className":"m-auto flex h-full max-w-[970px] items-center justify-between","children":[["$","div",null,{"className":"flex items-center gap-[20px]","children":[["$","$L4",null,{"href":"/","children":["$","$L5",null,{"className":"h-[56px] w-[60px]","src":"/assets/icons/been-logo.svg","width":60,"height":56,"priority":true,"alt":"logo"}]}],["$","div",null,{"className":"flex items-center gap-[20px]","children":["$","$L4",null,{"href":"/about","children":"About"}]}]]}],["$","$L6",null,{}]]}]}],["$","main",null,{"className":"mx-auto my-0 max-w-[970px] p-[16px]","children":["$","$L7",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"flex items-center justify-center pb-[16px] text-center text-[14px] text-gray600","children":"Copyright © Been."}]]}]}]]}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L9",["$","$La",null,{"children":"$Lb"}],null,["$","$Lc",null,{"children":["$Ld","$Le",["$","$Lf",null,{"promise":"$@10"}]]}]]}],{},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","GH1mBnDviPd74GGxDQ08Y",{"children":[["$","$L11",null,{"children":"$L12"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$13","$undefined"],"s":false,"S":true}
14:"$Sreact.suspense"
15:I[4911,[],"AsyncMetadata"]
b:["$","$14",null,{"fallback":null,"children":["$","$L15",null,{"promise":"$@16"}]}]
17:I[1114,["874","static/chunks/874-39484d5feff3b265.js","766","static/chunks/766-b650f0278a972ad4.js","974","static/chunks/app/page-db833fa3fc4df86a.js"],"default"]
e:null
18:T16ad,
## 세션과 쿠키의 개념

### 세션(session)

세션은 서버가 사용자(클라이언트)마다 정보를 유지하기 위해 서버측에서 관리하는 데이터 저장소다.
세션 데이터 자체는 서버 메모리나 별도 저장소(DB, Redis 등)에 저장하고, 클라이언트에게는 세션을 구분할 수 있는 고유 ID(session ID)를 발급한다.
세션 ID는 클라이언트가 서버에 요청할 때마다 함께 전송되며, 서버는 이 ID를 통해 해당 클라이언트의 세션 데이터를 조회한다.

- 서버 측에서 관리, 저장 : 데이터는 서버에 있으므로 보안성이 높다.
- 임시 : 브라우저를 종료하거나 세션 타임아웃이 발생하면 세션 데이터는 삭제된다.
- 서버 리소스 : 사용자가 많아지면 서버 메모리나 저장소에 부담이 될 수 있다.

---

### 쿠키(cookie)

쿠키는 사용자(클라이언트)의 브라우저에 저장되는 작은 데이터 조각이다. 서버가 클라이언트에게 쿠키를 보내면 클라이언트는 이를 저장하고, 이후 서버에 요청할 때마다 해당 쿠키를 서버에 전달한다.
이를 통해 서버는 사용자 정보를 지속적으로 식별하거나 상태를 유지할 수 있다.

- 클라이언트 측에서 관리, 저장 : 쿠키는 클라이언트의 브라우저에 저장되므로 서버에 부담이 적다.
- 지속성 : 만료 기간을 설정할 수 있어, 사용자가 브라우저를 종료해도 쿠키는 남아있을 수 있다.
- 크기 제한 : 쿠키는 일반적으로 4KB 이하로 제한된다.
- 보안성 : 쿠키는 클라이언트에 저장되므로 보안성이 낮다. 민감한 정보는 쿠키에 저장하지 않는 것이 좋다.

---

## 세션과 쿠키의 차이점

| 구분       | 세션(session)                          | 쿠키(cookie)                           |
|------------|----------------------------------------|----------------------------------------|
| 저장 위치  | 서버 측                                | 클라이언트 측                          |
| 데이터 크기 | 서버 메모리나 저장소에 저장            | 클라이언트의 브라우저에 저장           |
| 만료 기간  | 세션 타임아웃 또는 브라우저 종료 시 삭제 | 만료 기간 설정 가능                     |
| 보안성     | 상대적으로 높음                        | 상대적으로 낮음                        |
| 사용 용도   | 사용자 인증, 장바구니 등 상태 유지      | 사용자 설정, 로그인 정보 등 지속적 저장 |
| 서버 리소스 | 사용자가 많아지면 부담이 될 수 있음     | 서버에 부담이 적음                      |
| 크기 제한  | 없음                                   | 일반적으로 4KB 이하                    |
| HTTP 전송  | 세션 ID를 통해 서버와 클라이언트 간에 전송 | 쿠키를 통해 서버와 클라이언트 간에 전송  |
| 보안 설정   | HTTPS 전송 시 보안 설정 가능            | HttpOnly, Secure 속성으로 보안 설정 가능 |
| 만료 설정   | 서버에서 관리                          | 클라이언트에서 관리                     |
| 사용 예시   | 로그인 상태 유지, 장바구니 정보 저장    | 사용자 설정, 로그인 정보 저장           |
| 삭제 방법   | 서버에서 세션 삭제                     | 클라이언트에서 쿠키 삭제                |

---

## 세션과 쿠키의 사용 예시

### 세션 사용 예시

- 로그인 상태 유지 : 사용자가 로그인하면 서버는 세션을 생성하고, 세션 ID를 클라이언트에게 전달한다. 이후 클라이언트는 이 세션 ID를 사용하여 서버에 요청할 때마다 로그인 상태를 유지할 수 있다.
- 장바구니 정보 : 사용자가 쇼핑몰에서 장바구니에 상품을 담으면, 서버는 세션에 장바구니 정보를 저장한다. 사용자가 페이지를 이동하더라도 장바구니 정보는 유지된다.
- 사용자 맞춤형 정보 : 사용자가 웹사이트에서 설정한 개인화된 정보를 세션에 저장하여, 사용자가 페이지를 이동하더라도 해당 정보를 유지할 수 있다.
```javaScript
const session = require('express-session');

app.use(session({
  secret: 'secret-key', // 암호화용 키
  resave: false,
  saveUninitialized: true,
  cookie: { secure: true }
}));

app.post('/login', (req, res) => {
  req.session.user = { id: 'user123', name: 'john' };
});
```

---

### 쿠키 사용 예시
- 로그인 정보 : 사용자가 로그인하면 서버는 쿠키에 로그인 정보를 저장하고, 이후 클라이언트는 이 쿠키를 사용하여 자동으로 로그인할 수 있다.
- 사용자 설정 : 사용자가 웹사이트에서 설정한 언어, 테마 등을 쿠키에 저장하여, 사용자가 페이지를 이동하더라도 해당 설정을 유지할 수 있다.
- 광고 추적 : 광고 네트워크는 쿠키를 사용하여 사용자의 행동을 추적하고, 맞춤형 광고를 제공할 수 있다.

```javaScript
// Cookie 생성 예시
document.cookie = "username=john; expires=Fri, 31 Dec 2024 23:59:59 GMT; path=/";

// 서버에서 쿠키 설정 (Express 예시)
res.cookie('username', 'john', { maxAge: 900000, httpOnly: true });
```

---

### 정리

결국, 둘의 핵심적인 차이는 저장 위치(서버 vs 클라이언트)와 지속성, 보안성에 있다.

- 세션(Session): 민감한 데이터나 일시적으로 관리해야 하는 데이터, 서버에서 관리가 필요한 데이터를 저장.
- 쿠키(Cookie): 사용자의 브라우저에서 저장하는 간단하고 가벼운 데이터를 저장, 사용자의 설정 값, 지속적인 추적, 개인화 데이터에 적합.
19:T1494,
### React Parallel Routes와 View Transitions API

웹뷰 개발시 AOS에서 뒤로가기 버튼을 누르면 모달이 닫히지 않고, 앱이 종료되거나 웹뷰가 닫히는 이슈가 생길 수 있다.
보통 모달을 만들 때 열고 닫히는 상태 기반으로 모달을 만든다. 이런 경우 애니메이션 처리나 URL 동기화, 뒤로가기 동작을 처리하기가 불편할 수 있다.

이러한 단점을 해결하기위해 `react-router-dom`으로 병렬 라우팅을 구현할 수 있다.
이 글에서는 `react-router-dom`을 사용하여 병렬 라우팅을 구현하는 방법과 `View Transitions API`를 활용하여 모달 애니메이션을 처리하는 방법에 대해 작성하고자 한다.

Nextjs 에서는 appRouter에서는 기본적으로 병렬 라우팅을 지원한다.

```
app/
├── layout.tsx
├── page.tsx              # 홈
├── inbox/
│   ├── page.tsx          # 리스트
│   ├── @modal/           # 병렬 슬롯
│   │   ├── default.tsx   # 모달 없는 기본 화면
│   │   └── [id]/page.tsx # 특정 모달 열릴 때
```

```typescript jsx
export default function InboxLayout({
  children,
  modal,
}: {
  children: React.ReactNode;
  modal: React.ReactNode;
}) {
  return (
    <div>
      {children}
      {modal}
    </div>
  );
}
```
대충 이런식으로 구현이 가능하다. 그럼 React에서는 어떻게 구현할 수 있을까?

먼저 간단하게 라우팅을 구성해보자

```typescript jsx
// App.tsx
import {createBrowserRouter, RouterProvider} from "react-router-dom";
import ListPage from "./routes/ListPage.tsx";
import DetailModal from "./components/DetailModal.tsx";

const router = createBrowserRouter([
    {
        path: '/list',
        element: <ListPage />,
        children: [
            {
                path: ':id',
                element: <DetailModal />,
            },
        ],
    },
]);

function App() {
    return <RouterProvider router={router} />;
}


export default App
```
/list/1 로 접근했을 때, createPortal로 구성한 모달이 열리게하고, 뒤로가기 버튼을 누르면 모달이 닫히게 구현할 수 있다.

```typescript jsx
// ListPage.tsx
import {Outlet} from 'react-router-dom';
import useViewTransitionNavigate from "../hooks/useViewTransitionnavigate.ts";

export default function ListPage() {
    const navigate = useViewTransitionNavigate();

    return (
        <div>
            <h2>리스트 페이지</h2>
            <ul>
                {[1, 2, 3].map(id => (
                    <li key={id}>
                        <button onClick={() => navigate(`/list/${id}`)}>Item {id} 보기</button>
                    </li>
                ))}
            </ul>

            <Outlet />
        </div>
    );
}
```

ListPage에서는 Outlet을 사용하여 병렬 라우팅을 구현했다.
여기서 Outlet은 중첩 라우트를 렌더링하는 컴포넌트인데, 자식 컴포넌트를 렌더링하는 위치를 나타낼 수 있다.
`<Outlet />`을 사용하여 ListPage의 자식인 모달을 렌더링할 수 있다.

```typescript jsx
    children: [
        {
            path: ':id',
            element: <DetailModal />,
        },
    ]
````

```typescript jsx
// DetailModal.tsx
import {useParams} from 'react-router-dom';
import Modal from './Modal';
import useViewTransitionNavigate from "../hooks/useViewTransitionnavigate.ts";

export default function DetailModal() {
    const { id } = useParams();
    const navigate = useViewTransitionNavigate();

    return (
        <Modal onClose={() => navigate('/list')}>
            <h3>Item {id} 상세</h3>
            <p>이건 모달입니다</p>
        </Modal>
    );
}
```

```typescript jsx
// useViewTransitionNavigate.tsx
import {useNavigate} from 'react-router-dom';

export default function useViewTransitionNavigate() {
    const navigate = useNavigate();

    return (to: string | number) => {
        if (typeof to === 'number') {
            return navigate(to);
        }

        if ('startViewTransition' in document) {
            (document).startViewTransition(() => navigate(to));
        } else {
            navigate(to);
        }
    };
}
```

간단한 hook을 만들어서 `startViewTransition`이 지원되는 경우에만 애니메이션을 적용하도록 했다.
View Transitions API는 DOM 변경을 애니메이션으로 처리할 수 있는 API로, 브라우저에서 지원하는 경우에만 사용할 수 있다.
대부분 크롬계열의 브라우저만 지원하고, 아직 지원하지 않는 브라우저가 많아서 모바일 환경의 웹뷰에서는 사용하기 힘들것 같다.

View Transitions API 대해서는 다음에 작성하는걸로하고,, 위처럼 구현해서 모달을 띄우면 URL이 /list/1로 변경되고, /list 페이지에서 모달이 열리게 된다.

<img src="/assets/blog/javaScript/parallel-routes.gif" width={300} height={300} alt="post image"/>

이런 식으로 모달을 구현하면 좀 더 앱스러운 UX를 제공할 수 있다.
뒤로가기시에도 모달이 닫히고, URL도 변경되기 때문에 사용자가 뒤로가기 버튼을 눌렀을 때 모달이 닫히는 동작을 자연스럽게 처리할 수 있다.

1a:T3de5,
### 들어가며
단순한 스터디에서 시작했지만, 예비창업패키지에도 선정되며 아주 작은 스타트업처럼 운영하게 된 스터디를 회고하며 느낀 점과 배운 점을 정리해보려 한다.

우리팀은 초기에 9명정도로 구성되었고, 팀장은 대학생이었으며, 나머지 구성원의 대부분이 직장인이었다.

기획자, 디자이너, 백엔드, 프론트 등 다양한 역할을 담당하는 팀원들이 모여 협업을 진행했으며, 거의 스타트업과 유사한 형태로 운영되었다.

2년간 휴일을 제외하고는 매주 빠짐없이 1회씩 정기 회의를 진행하였다.

---

초기 FE는 nx를 이용하여 monorepo로 구성하였다.

Next.js을 이용하여 웹뷰기반의 앱을 구성하였고, 앱은 react-native로 빌드해 배포하였다.

---

### 웹뷰는 불편했다
웹뷰에서의 제약들이 너무 많다고 느껴졌다.
- 디바이스의 GPS를 받아와 사용자의 위치를 웹뷰로 전송하여 웹뷰에서 해당 위치를 기반으로 병원들을 검색하기도 했고, 해당 위치를 마커로 그리기도 했다.


또한 앱에서 받은 권한들을 웹뷰로 전달하기 위한 모든 과정들이 개발자 측면에서 너무 불편하게 다가왔다.
<img src="/assets/blog/javaScript/web-react-native.png" width="100%" alt="리액트와 리액트네이티브 차이"/>
이미지 출처 : [toss](https://toss.tech/article/react-native-2024)
- 앱 로딩 속도와 페이지 전환 속도에 있어서도, 앱에 비해 웹뷰는 네트워크가 조금만 느려진다거나, html, css, js를 모두 다운받아야 하기 때문에 사용자입장에서 앱이 굉장히 느리게 느껴졌다.
- 배포 방식과 비용적인 측면
    - 초기 MVP를 만들기 위해서는 웹뷰가 좋지만, 이후에 보다 정교한 앱을 만들기 위해서는 웹뷰는 적합하지 않다고 느꼈다.
    - 웹뷰는 별도의 도메인 비용과 호스팅비용이 따로 들기 때문에, 장기적으로 봤을때 앱을 배포하기 위해서는 웹뷰를 사용하기보다는 앱을 개발하는 것이 더 효율적이라고 느껴졌다.
    - 웹보다는 앱서비스가 주력이었다.

---

### React Native로의 전환
웹뷰를 과감히 버리고, 새롭게 react-native로 앱을 개발하기로 했다.

다행히 이전회사에서 react-native로 몇가지 앱을 개발해본 경험도있었고, 개인적으로 앱 개발에 대해 관심이 많았기 때문에, react-native로의 전환은 큰 어려움이 없었다.
몇가지 기억나는 점들을 정리해보자면
- 특히 지도 이슈가 컸다. 카카오, 네이버 지도의 공식 SDK가 부재했고, 지원 가능한 라이브러리는 대부분 업데이트가 중단된 상태였다. 그 중 한분의 라이브러리를 https://github.com/mym0404/react-native-naver-map 를 사용하기로 했다.
    - 해당 라이브러리는 v2 이상은 react-native에 새로운아키텍처만 지원하였고, v1은 클러스터를 지원하지 않아 클러스터만 따로 구현하기로 했다.
    - 클러스터를 어떤식으로 구현할지 서치해보다가 k-means알고리즘을 사용한 react-native-maps 라이브러리에서 클러스터링을 구현한 것을 보고, 해당 라이브러리를 참고하여 클러스터를 구현하였다.
```typescript
export const kMeansClustering = (
  points: { latitude: number; longitude: number }[],
  k: number,
  maxIterations: number = 100,
  mergeDistance: number = 500, // 병합 거리 (미터)
): { latitude: number; longitude: number; points: { latitude: number; longitude: number }[] }[] => {
  if (points.length === 0 || k <= 0) {
    throw new Error('Invalid input: No points or invalid number of clusters.');
  }

  // 초기 중심점 랜덤 선택
  const centroids = Array.from(new Set(points))
    .sort(() => Math.random() - 0.5)
    .slice(0, k)
    .map(point => ({
      latitude: point.latitude,
      longitude: point.longitude,
    }));

  let clusters: { latitude: number; longitude: number; points: { latitude: number; longitude: number }[] }[] = [];
  let iteration = 0;

  while (iteration < maxIterations) {
    // 클러스터 초기화
    clusters = centroids.map(centroid => ({
      ...centroid,
      points: [],
    }));

    // 각 포인트를 가장 가까운 중심점에 할당
    points.forEach(point => {
      let closestIndex = 0;
      let minDistance = Infinity;

      centroids.forEach((centroid, index) => {
        const distance = calculateDistance(point.latitude, point.longitude, centroid.latitude, centroid.longitude);
        if (distance < minDistance) {
          minDistance = distance;
          closestIndex = index;
        }
      });

      clusters[closestIndex].points.push(point);
    });

    // 빈 클러스터 처리 (재배치)
    clusters.forEach((cluster, index) => {
      if (cluster.points.length === 0) {
        const largestCluster = clusters.reduce((max, current) =>
          current.points.length > max.points.length ? current : max,
        );
        const pointToMove = largestCluster.points.pop();
        if (pointToMove) {
            clusters[index].points.push(pointToMove);
        }
      }
    });

    // 새로운 중심점 계산
    const newCentroids = clusters.map(cluster => {
      const count = cluster.points.length;
      if (count === 0) {
          return cluster;  // 빈 클러스터는 기존 중심 유지
      }

      const avgLat = cluster.points.reduce((sum, point) => sum + point.latitude, 0) / count;
      const avgLon = cluster.points.reduce((sum, point) => sum + point.longitude, 0) / count;

      return { latitude: avgLat, longitude: avgLon };
    });

    // 중심점 업데이트
    centroids.splice(0, centroids.length, ...newCentroids);

    iteration++;
  }

  // 클러스터의 포인트가 1개인 경우 처리
  clusters = clusters.map(cluster => {
    if (cluster.points.length === 1) {
      const singlePoint = cluster.points[0];
      const nearbyPoints = points.filter(point => {
        const distance = calculateDistance(
          singlePoint.latitude,
          singlePoint.longitude,
          point.latitude,
          point.longitude,
        );
        return distance <= mergeDistance && point !== singlePoint;
      });

      // 주변 포인트 추가
      cluster.points.push(...nearbyPoints);

      // 병합 후 중심점 재계산
      cluster.latitude = cluster.points.reduce((sum, point) => sum + point.latitude, 0) / cluster.points.length;
      cluster.longitude = cluster.points.reduce((sum, point) => sum + point.longitude, 0) / cluster.points.length;
    }
    return cluster;
  });

  return clusters;
};
```
`1. 초기 중심점(Centroids) 설정`
- 입력받은 포인트 중 랜덤으로 k개의 중심점을 선택

`2. 포인트 할당`
- 각 포인트를 가장 가까운 중심점에 할당

`3. 빈 클러스터 처리`
- 특정 중심점에 아무 포인트도 할당되지 않는 경우가 발생할 수 있기때문에, 가장 큰 클러스터에서 포인트를 하나 가져와서 빈 클러스터에 배치

`4. 중심점 재계산`
- 각 클러스터의 중심점 위치를 클러스터에 속한 포인트들의 평균 좌표로 다시 계산

`5. 반복`
- 중심점 위치가 거의 변하지 않을 때까지 또는 최대 반복 횟수까지 이 과정을 반복

`6. 포인트가 1개인 클러스터 처리`
- 클러스터에 포인트가 하나뿐인 경우, 일정 거리 내 다른 포인트를 추가

---

### 스크롤 애니메이션
<img src="/assets/blog/javaScript/medical-animation.gif" width="300px" alt="스크롤 애니메이션"/>

```typescript jsx
  const scrollY = useSharedValue(0);
  const { top, right, left, bottom } = useSafeAreaInsets();
  const viewRef = useRef<FlatList>(null);

  const scrollHandler = useAnimatedScrollHandler({
    onScroll: event => {
      scrollY.value = event.contentOffset.y;
    },
  });

  const petWrapperStyle = useAnimatedStyle(() => {
    const translateY = interpolate(scrollY.value, [0, 100], [0, -100], Extrapolation.CLAMP);
    const opacity = interpolate(scrollY.value, [0, 100], [1, 0], Extrapolation.CLAMP);
    const height = interpolate(scrollY.value, [0, 180], [180, 0], Extrapolation.CLAMP);

    return {
      transform: [{ translateY: translateY }],
      opacity,
      height: withTiming(height, {
        duration: 50,
      }),
      overflow: 'hidden',
      useNativeDriver: true,
    };
  });

<>
      <Animated.View
        style={[
          styles.petWrapper,
          petWrapperStyle,
          {
            paddingTop: top,
            paddingLeft: left,
            paddingRight: right,
          },
        ]}
      >
        {...}
      </Animated.View>

      <View style={{ backgroundColor: color.white['500'] }}>
        {...}
      </View>

      <Animated.FlatList
        ref={viewRef}
        scrollEventThrottle={16}
        onScroll={scrollHandler}
        contentContainerStyle={[styles.listWrapper]}
        data={hospitalData}
        keyExtractor={keyExtractor}
        renderItem={renderItem}
        stickyHeaderHiddenOnScroll={false}
        ListHeaderComponent={
          ...
        }
        ListFooterComponent={
          ...
        }
        onEndReached={loadMore}
        onEndReachedThreshold={0.5}
        ListEmptyComponent={
          ...
        }
      />
    </>
```
위와 같은 구조에서 스크롤을 내렸을때
```typescript jsx
      <View style={{ backgroundColor: color.white['500'] }}>
        {...}
      </View>
```

해당 컴포넌트만 최상단으로 배치하고 나머지는 사라지게 하는 작업이 필요했다.

먼저, useSharedValue(0)을 사용하여 스크롤 위치를 실시간으로 추적하고, 스크롤이 발생할 때마다 scrollHandler가 호출되면서, 현재의 스크롤 값을 scrollY.value에 저장했다.

저장된 scrollY에 따라 사라지게 해야하는 컴포넌트의 스타일을 useAnimatedStyle을 사용하여 애니메이션 효과를 주었다.

```typescript jsx
  const petWrapperStyle = useAnimatedStyle(() => {
    const translateY = interpolate(scrollY.value, [0, 100], [0, -100], Extrapolation.CLAMP);
    const opacity = interpolate(scrollY.value, [0, 100], [1, 0], Extrapolation.CLAMP);
    const height = interpolate(scrollY.value, [0, 180], [180, 0], Extrapolation.CLAMP);

    return {
      transform: [{ translateY: translateY }],
      opacity,
      height: withTiming(height, {
        duration: 50,
      }),
      overflow: 'hidden',
      useNativeDriver: true,
    };
  });
```

react-native-reanimated의 interpolate를 사용하여 스크롤 위치에 따라 translateY, opacity, height를 조정하였다.

- translateY: 스크롤이 0 ~ 100일 때 위로 최대 -100만큼 이동.
- opacity: 스크롤이 0 ~ 100일 때 투명도가 1 → 0으로 변화.
- height: 스크롤이 0 ~ 180일 때 높이가 180 → 0으로 줄어듬.

결과적으로, 사용자가 위로 스크롤하면, 영역은 점점 위로 이동하며 투명하게 사라지고 높이도 축소된다.

### 1차 MVP 배포와 예비창업패키지 선정
병원지도, 병원상세페이지, 가격정보와 리뷰 등을 제공하는 앱을 개발하여 1차 MVP를 배포하였다.

이때 예비창업패키지에 선정되었고, 약 5천만원 이상의 지원금을 받을 수 있었다.

해당금액은 마케팅, 인건비, 서버비용, 기타 작업 툴 비용 등으로 사용되었다.

---

### 예비창업패키지 이후: 2차, 3차 업데이트
시간이 지날수록 9명 정도에서 시작했던 팀원은 5명까지 줄게되었다. 나는 계속 퇴근 후 파트로 작업을 했고, 풀타임으로 작업을 하실 인원들이 새로 합류하신 시기이기도 했다.

1차 때보다는 좀 더 창업의 형태로 바뀌었고 다른 구성원들의 책임감과 몰입도가 더 필요했던 시기였던것 같다.

2차와 3차에는 앱의 디자인을 리뉴얼하고, 로그인과 유저의 펫정보 등록, 진료별로 병원을 검색할 수 있는 리스트, 네이버 스마트스토어를 이용한 상품판매, 병원예약 등 많은 기능들을 추가하게 되었다.

<div style={{
    display: 'flex',
    justifyContent: 'space-between',
}}>
    <div>
        <h3>as-is</h3>
        <img src="/assets/blog/javaScript/old-main.png" alt="구 메인페이지"/>
    </div>
    <div>
        <h3>to-be</h3>
        <img src="/assets/blog/javaScript/new-main.png" alt="새로운 메인페이지"/>
    </div>
</div>

---

### SEO를 위한 웹사이트
2, 3차 업데이트를 진행하면서 마케팅에 필요한 웹사이트가 필요했다.

웹사이트는 앱내에 기능 중 몇가지만 제공하기로 했고, 검색엔진에 노출되는 것과, 마케팅을 위한 랜딩페이지로 사용하기로 했다.

Next.js로 돌아가서 개발하는데 SEO에 최대한 초점을 맞추어 작업을 진행했다.

<img src="/assets/blog/javaScript/lighthouse.png" alt="lighthouse 점수"/>

이때 아마 SEO에 대한 관심이 많이 생겼던것 같다. meta 태그와 og 태그, sitemap.xml, robots.txt 등을 설정하고, SSR과 SSG를 적절히 사용하여 페이지를 구성하였다.

lighthouse 점수를 최대한 높이기 위해 노력했고, 실제로도 검색엔진에 잘 노출되는지 확인하기위해 구글 서치콘솔, 네이버 서치어드바이저에 등록하여 확인하였고, 구글 애널리틱스와 태그매니저를 이용하여 방문자 수와 페이지뷰 등을 확인할 수 있었다.

---

### 2년의 과정 속에서 얻은 것과 아쉬운 점
작은 스터디로 시작한 모임이 이렇게 긴 시간동안 지속되는게 쉽지 않다는걸 알고있다. 이전에도 비슷한 스터디를 많이 해봤지만, 여러 사정들로 인해 중간에 흐지부지되거나, 팀원들이 바뀌는 경우가 많았다.

하지만, 팀원들 서로가 각자의 위치에서 최선을 다하고, 서로를 존중하며 배려하는 모습이 너무 좋았다. 특히, 팀원들이 각자의 역할을 충실히 수행하고, 서로의 의견을 존중하며 협업하는 모습이 인상적이었다.

기술적 성장은 물론이고 비즈니스 관점에서도 많은 것을 배울 수 있었다.

<div style={{
    display: 'flex',
    width: '100%',
}}>
    <div style={{
        display: 'flex',
        width: '100%',
        flex: 1
    }}>
        <img src="/assets/blog/javaScript/gift-1.JPG" width='50%' alt="선물1"/>
        <img src="/assets/blog/javaScript/gift-2.JPG" width='50%' alt="선물2"/>
    </div>
    <div style={{
        display: 'flex',
        width: '100%',
        flex: 1,

    }}>
        <img src="/assets/blog/javaScript/gift-3.JPG" width='50%' alt="선물3"/>
        <img src="/assets/blog/javaScript/gift-4.JPG" width='50%' alt="선물4"/>
    </div>
</div>

<p>매년 명절마다 과일을 보내주시는 팀장님</p>



아쉬웠던 점은 초반에 기술 스택 선택에 대한 검증과, 아무래도 팀원들 모두 퇴근 후 빠듯한 시간에 작업을 하다보니, 깊게 나누지 못한 리뷰나 회고 등 이었다.

앞으로는 스터디를 진행하는 과정동안 기술적인 회고와 이슈 기록, 고민했던 부분들을 정리하는 시간을 가질 것이다.

---

25년도 지원사업은 아쉽게도 떨어졌다. 낮은 진입장벽, 데이터 수집 한계, 구조가 비슷한 플랫폼에 손익분기 달성 실패, 낮은 재방문 주기 등이 이유였다.

현재 내부에서는 다양한 의견들이 오가고있다. 아무래도 프로젝트를 유지하는데는 비용적인 문제가 가장 크기때문에, 수익모델 개선, 다른 신사업 아이템들을 고민하고 있다.
1b:T1750,
### 딥링크
- 웹링크 URL이 사용자를 특정 웹사이트로 이동시키는 것처럼, 딥링크는 사용자를 특정 앱이나 앱의 원하는 화면으로 이동하도록 유도하는 링크이다.

### 딥링크 유형
<div>
    <img style={{
        margin: 0
    }} src="/assets/blog/javaScript/deep-link-2.png" width="100%" alt="post image"/>
    <p style={{
        margin: 0,
        textAlign: "center"
    }}>[출처 tosspayments](https://docs.tosspayments.com/resources/glossary/deep-link)</p>
</div>

- 딥링크는 AOS, IOS 모두 사용할 수 있고, 커스텀 스킴은 `앱 링크`, `URI 스킴`으로 불리기도 한다.

### 딥링크 구현
- 진행중인 사이드프로젝트에서는 SEO를 위한 웹사이트와 앱을 연결하기 위해 딥링크를 구현하였다.

## 1. 웹에서 앱으로 이동

```tsx
const useAppOpen = () => {
  const [appOpened, setAppOpened] = useState(false);
  const { os } = useFetchCookie();
  const router = useRouter();

  useVisibilityChange({
    onVisible: () => setAppOpened(true),
    onHidden: () => setAppOpened(false),
  });

  const handleAppOpen = ({ appScheme }: { appScheme: string }) => {
    router.replace(
      os === 'ios'
        ? `${APP_SCHEME}${appScheme}`
        : `intent://${appScheme}#Intent;scheme=myapp;package=com.myapp.app;end;`,
    );

    setTimeout(() => {
      if (!appOpened) {
        window.location.href =
          os === 'ios' ? APPLE_STORE_URL : GOOGLE_PLAY_STORE_URL;
      }
    }, 500);
  };

  return {
    handleAppOpen,
  };
};

export default useAppOpen;
```
웹에서는 우선 `os`를 저장했고, `os`별로 다른 경로를 지정했다.

ios 에서는 `myapp://`로 바로 `Deep Link`를 이용해 이동하고, aos에서는 `intent://`로 시작하는 `Intent스킴`을 사용해 서로 다른 경로를 사용하고 있다.

그리고 딥링크에 앱이 열리지 않으면 `setTimeout`을 이용해 앱스토어로 이동하도록 구현했다.

`setTimeout`을 사용한 이유는 앱이 설치되어 있다면, 브라우저는 즉시 앱을 실행하고, 반대로 앱이 설치되지 않으면 아무런 변화도 일어나지 않는다.
이 상태를 감지하기위해서 500ms의 시간동안 앱이 실행되지 않는다면 앱스토어로 이동하는 방식으로 구현했다.

## 2. 앱에서 링크 이동

### AOS

```xml
// android/app/src/main/AndroidManifest.xml

    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="myapp" />
    </intent-filter>
```
위 경로에서 `scheme`을 `myapp`로 지정해주면 된다.

### IOS

```
// ios/MyApp/Info.plist

<key>CFBundleURLTypes</key>
<array>
    <dict>
        <key>CFBundleURLName</key>
        <string>com.myapp.app</string>
        <key>CFBundleURLSchemes</key>
        <array>
            <string>myapp</string>
        </array>
    </dict>
</array>
```

`CFBundleURLSchemes`에 `myapp`을 추가해주면 된다.


---

### react-navigation

현재 프로젝트에서는 `@react-navigation/native` 라이브러리를 사용하고 있어서, `NavigationContainer`에서 지원하는 `linking props`사용해 딥링크를 구현했다.

```tsx
// App.tsx

{...}
<NavigationContainer
  linking={linkingConfig}
  ref={navigationRef}
  {...}
>
    {...}
</NavigationContainer>
{...}

```

```tsx
// ../linkingConfig.ts

export const linkingConfig: LinkingOptions<NavigationProps> = {
  prefixes: ['myapp://'],
  config: {
    screens: {
      [RootNavigatorName.rootTab]: {
        screens: {
          [TabNavigatorName.HOME_TAB]: {
            path: 'open',
            screens: {
              [StackNavigatorName.HOME_SCREEN]: '',
            },
          },
          [TabNavigatorName.ECOMMERCE_TAB]: {
            path: 'ecommerce',
            screens: {
              [StackNavigatorName.ECOMMERCE_SCREEN]: '',
            },
          },
        },
      },
      [StackNavigatorName.AUTH_ONBOARDING_SCREEN]: 'onboarding',
      [StackNavigatorName.AUTH_SCREEN]: 'auth',
    },
  },
  {...}
};
```
먼저 `prefixes`에 `myapp://`을 추가해주고, `screens`에 각 스크린에 등록한 경로들을 `path`로 지정해주면 된다.

```tsx
  async getInitialURL() {
    const url = await Linking.getInitialURL();

    if (url) {
      const redirectUrl = await handleGetUserInfo();
      return redirectUrl || url;
    }
  },
```
`getInitialURL`을 이용해 앱이 처음 실행될 때, 딥링크를 처리할 수 있도록 구현했다.
여기서 `handleGetUserInfo` 함수는 앱이 딥링크를 통해 진입했을 경우 스플래쉬스크린을 거치지않아, 사용자 정보를 가져와 로그인 여부를 확인하는 함수이다.

```tsx
  subscribe(listener) {
    const onReceiveURL = async (event: { url: any }) => {
      if (event.url) {
        const redirectUrl = await handleGetUserInfo();
        listener(redirectUrl || event.url);
      }
    };

    const linkingListener = Linking.addEventListener('url', onReceiveURL);
    const appStateListener = AppState.addEventListener('change', async nextAppState => {
      if (nextAppState === 'active') {
        const url = await Linking.getInitialURL();

        if (url) {
          const redirectUrl = await handleGetUserInfo();
          listener(redirectUrl || url);
        }
      }
    });

    return () => {
      linkingListener.remove();
      appStateListener.remove();
    };
  },
```
`subscribe`를 이용해 앱이 실행중일 때, 딥링크를 처리할 수 있도록 구현했다.

---

- 앱이 처음 실행될 때 : `getInitialURL`을 이용해 딥링크 처리
- 앱이 백그라운드 -> 포그라운드 전환될 때 : `subscribe`에 `Appstate`를 이용해 딥링크 처리
- 앱이 실행중일 때 : `subscribe`에 `Linking`을 이용해 딥링크 처리
1c:T6a2,
웹 페이지가 현재 사용자에게 보이는지 아닌지를 확인하는 방법이 있다.

`document.visibilityState`를 사용하면 페이지가 현재 사용자에게 보이는지 아닌지를 확인할 수 있다.

`document.visibilityState`는 다음과 같은 상태를 가진다.

- 'visible' : 페이지 내용은 적어도 부분적으로 보일 수 있다. 실제로 이는 페이지가 최소화 되지 않은 창(브라우저)에서의 선택된 탭 을 의미

- 'hidden' : 페이지 내용은 사용자에게 표시되지 않는다. 실제로 이는 document가 background-tap(다른 탭)이거나, 최소화 된 창의 일부이거나, OS 화면 잠금이 활성 상태임을 의미

```jsx
if (document.visibilityState === 'visible') {
    // 페이지가 사용자에게 보이는 상태
} else {
    // 페이지가 사용자에게 보이지 않는 상태
}
```

```jsx
import { useEffect } from 'react';

interface UseVisibilityChangeProps {
  onVisible: () => void;
  onHidden: () => void;
  dependencies?: unknown[];
}

const useVisibilityChange = ({
  onVisible,
  onHidden,
  dependencies = [],
}: UseVisibilityChangeProps) => {
  useEffect(() => {
    const onVisibilityChange = () => {
      document.visibilityState === 'visible' ? onVisible() : onHidden();
    };

    document.addEventListener('visibilitychange', onVisibilityChange);
    return () => {
      document.removeEventListener('visibilitychange', onVisibilityChange);
    };
  }, [onHidden, onVisible, ...dependencies]);
};

export default useVisibilityChange;
```

웹 페이지 이탈을 감지할 수 있고, 모바일 웹뷰에서 앱의 백그라운드 상태나 전환을 감지할 수 있다.
1d:Taca,
사내 프로젝트를 진행하면서 IOS 웹뷰에서 안전 영역을 설정하는 방법에 대해 알게되었다.

아이폰 X 부터는 디스플레이에 노치 디자인이 적용되고, 하단에는 물리 버튼이 사라지고 제스처로 대체되었다.

이로 인해 기존의 웹뷰에서는 노치 디자인과 하단의 제스처 영역을 고려해야 한다.

첫번째로 웹내에서 safe area 영역을 설정하는 방법은 아래와 같다.

```css
padding-top: env(safe-area-inset-top);
padding-right: env(safe-area-inset-right);
padding-left: env(safe-area-inset-left);
padding-bottom: env(safe-area-inset-bottom);
```

위와 같이 설정하면 IOS 웹뷰에서는 safe area 영역을 설정할 수 있다.

적용하고 개발자 도구로 확인해보니 해당 영역만큼 padding 이 적용되어 있었다.

---

두번째로 safe area 영역을 무시하고 전체 화면을 사용하려면

```html
<meta name="viewport" content="viewport-fit=cover" />
```

위와 같이 설정하면 safe area 영역을 무시하고 전체 화면을 사용할 수 있다.

프로젝트는 Next.js 로 개발되어 layout 에 해당 meta 태그를 추가하여 해결하였다.

```tsx
import type { Metadata } from 'next';

export const metadata: Metadata = {
    title: 'title',
    description: 'description',
    other: {
    viewport:
        'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, viewport-fit=cover',
    }
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>
        <main>{children}</main>
      </body>
    </html>
  );
}
```

추가로 핀치줌을 막기 위해 `maximum-scale=1.0`과 `user-scalable=0`을 설정하였다.

---

위 작업을 하면서 기존 모달 컴포넌트에서 모달이 열렸을 때 뒤 스크롤을 막으려고 아래와 같은 코드를 작성하였는데,

```tsx
  useEffect(() => {
      document.body.style.cssText = `
            position: fixed;
            top: -${window.scrollY}px;
            overflow: hidden;
            width: 100%;
        `;

      return () => {
        const scrollY = document.body.style.top;
        document.body.style.cssText = '';
        window.scrollTo(0, parseInt(scrollY || '0', 10) * -1);
      };
  }, []);
```

웹뷰내에서 모달이 열렸을 때 `fixed` 속성으로 인해 웹뷰에서 safe area 영역만큼 모달이 밀리는 현상이 발생했다.

```tsx
  useEffect(() => {
      document.body.style.cssText = `
            overflow: hidden;
        `;

      return () => {
        document.body.style.cssText = '';
      };
  }, []);
```

위와 같이 overflow 만 hidden 처리하여 해결하였다.
1e:T1359,
monorepo를 사용해 패키지들을 분리하는 과정에서 이슈를 확인했다.

번들링 하지않고, 패키지들을 `index.ts`에서 직접 내보내 사용했을 때, 사용하지 않는 코드들도 함께 포함되는 문제가 있었다.
이 문제점을 확인하고 tree-shaking을 적용하기 위해 rollup을 사용하게 되었다.

---

### tree-shaking

tree-shaking은 최종 번들링한 결과에서 사용하지 않는 코드를 제거하는 기능이다.
불필요한 코드가 없어지기 때문에 번들 파일의 크기를 줄일 수 있다.

tree-shaking은 ES6 부터(esm) 지원되는 기능이다.

---

### rollup

먼저 약 10개정도 되는 패키지들을 각각 설정하는건 비효율 적이라 생각했다.
그래서 공통적으로 사용할 rollup.config.mjs 파일을 만들어 사용하기로 했다.

```javascript
import path from 'path';
import { readFileSync } from 'fs';
import { DEFAULT_EXTENSIONS } from '@babel/core';
import babel from '@rollup/plugin-babel';
import commonjs from '@rollup/plugin-commonjs';
import resolve from '@rollup/plugin-node-resolve';
import typescript from '@rollup/plugin-typescript';
import builtins from 'builtin-modules';
import json from '@rollup/plugin-json';
import { defineConfig } from 'rollup';
import terser from '@rollup/plugin-terser';

const extensions = [...DEFAULT_EXTENSIONS, '.ts', '.tsx'];

export function generateRollupConfig({ packageDir }) {

  {...}

  const plugins = [
    resolve({
      extensions,
    }),
    commonjs(),
    babel({
      exclude: 'node_modules/**',
      extensions,
      babelHelpers: 'bundled',
    }),
    json(),
    typescript({
      compilerOptions: {
        outDir: 'dist',
        module: 'esnext',
        moduleResolution: 'bundler',
      },
      tsconfig: path.join(packageDir, 'tsconfig.json'),
    }),
    terser(),
  ];

  const generateConfig = (output) => {
    return {
      input,
      output,
      external,
      plugins,
    };
  };

  return defineConfig([
    generateConfig([
      {
        dir: output,
        format: 'cjs',
        entryFileNames: '[name].js',
      },
      {
        dir: output,
        format: 'esm',
        entryFileNames: '[name].mjs',
        preserveModules: true,
        preserveModulesRoot: path.dirname(input),
      },
    ]),
  ]);
}
```

- `@rollup/plugin-babel` : rollup + babel 연동

**Note. @rollup/plugin-commonjs 보다 뒤에*

- `@rollup/plugin-commonjs` : CommonJS 모듈을 ES6으로 변환하여 롤업 번들에 포함

**Note. @rollup/plugin-node-resolve와 함께 사용*

- `@rollup/plugin-node-resolve` : node_modules에 외부 모듈 확인

**Note. @rollup/plugin-commonjs와 함께 사용*

- `@rollup/plugin-terser` : 간결하고 축소된 번들 생성 (띄어쓰기나 주석 제거)
- `@rollup/plugin-url` : data-URIs, ESM으로 가져옴
- `@rollup/plugin-virtual` : 메모리에서 가상 모듈을 로드

**Note. Use this plugin before any others such as node-resolve or commonjs, so they do not alter the output.*

- `@svgr/rollup` : svgr 플러그인
- `builtin-modules` : node.js 빌트인 모듈

- `external` : 특정 모듈을 번들에 포함하지 않고, 외부 모듈로 설정

---

### 각 패키지별 번들링

```javascript
import path from 'path';
import { generateRollupConfig } from '@repo/rollup-config';

const __dirname = path.resolve();

export default generateRollupConfig({ packageDir: __dirname });
```

utils에서 내보내는 함수 중 프로젝트별로 사용하는곳과 사용하지 않는 곳이 있었는데,
초기에 번들링과정을 거치지 않았을 때 프로젝트 빌드시 해당 함수를 각 프로젝트에 모두 포함되었다.

번들링 과정을 확인하기 위해 vite.config.js에

```javascript
{...}

    build: {
      rollupOptions: {
        output: {
          manualChunks: {
            utils: ['@repo/utils']
          },
        },
      },
    },

{...}
```

옵션을 추가해 비교해보았다.

<img src="/assets/blog/javaScript/rollup-1.png" width="100%" alt="bundle-test"/>
<img src="/assets/blog/javaScript/rollup-2.png" width="100%" alt="bundle-test"/>

전, 후 용량에 차이가 있다는걸 확인했고, js파일을 확인해 사용하는 함수만 포함되는었는지 확인해보았다.

---

처음 rollup을 사용해 패키지들을 번들링하면서 tree-shaking이라는 개념도 알게되었고, cjs와 esm의 차이점도 알게되었다.

다른 기업들의 오픈소스들을 뒤져가며 작업을 진행하면서 많은 것을 배울 수 있었던 시간이었다.

rollup 설정에 대해서 아직 완벽하게 이해하지는 못했으며, 내가 의도한대로 작동하는지도 조금 확신이 들지 않지만 이번 기회에 조금 더 깊게 공부해보고 계속해서 확인해보며 수정해나가야겠다.
개인적으로는 최적화해 나가는 과정이 매우 재밌었던 작업이었다!
1f:Ta2c,
최근 rollup으로 패키지를 만드는 과정에서 cjs와 esm에 대해 알게되었다.

### Module
자바스크립트의 모듈은 크게 CommonJS와 ES Module로 나뉜다.
애플리케이션의 규모가 커지면 커질수록 모듈화가 필요해지는데, 이때 모듈화를 위해 사용되는 것이 바로 CommonJS와 ES Module이다.

CommonJS는 Node.js에서 사용되는 모듈 시스템이며 (12버전 이후 부터는 두가지 모두 사용) 정확하게는 표준 시스템은 아니다,
ES6 이후에 ES Module이 등장하면서 표준 시스템이 되었고, 우리가 흔히 사용하는 `import`와 `export`의 키워드를 사용해 모듈을 효율적으로 불러와 사용할 수 있는게 바로 ES Module이다.

그러나 아직까지도 node.js의 CJS가 많이 사용되고 있으므로, 우리가 흔히 사용하는 라이브러리들은 보통 두가지의 모듈 시스템을 모두 지원할 수 있도록 만든다.

---

### cjs와 esm의 차이점

#### cjs
```javascript
// lib.js
module.exports = {
  name: 'lib'
}
```

```javascript
// index.js
const lib = require('./lib')
console.log(lib.name) // lib
```

#### esm
```javascript
// lib.js
export default {
  name: 'lib'
}
```

```javascript
// index.js
import lib from './lib'
console.log(lib.name) // lib
```

위의 예시에서 보듯이, cjs는 `module.exports`를 사용하여 모듈을 내보내고, `require`를 사용하여 모듈을 불러온다.
반면에 esm은 `export`를 사용하여 모듈을 내보내고, `import`를 사용하여 모듈을 불러온다.

- CJS는 동기적으로 동작하고, ESM은 비동기적으로 동작한다.
- CJS는 빌드 타임에 정적 분석을 적용하기 어렵고, 런타임에서만 모둘 관계를 파악할 수 있다.
- ESM은 빌드 단계에서 정적 분석을 통해 의존 관계를 파악할 수 있다.
- CJS는 Tree-shaking이 어렵지만 ESM은 Tree-shaking이 가능하다.

---

### 파일 구분

`.js` 파일이 CJS인지 ESM인지 구분하는 방법은 다음과 같다.

- package.json의 type 필드를 사용한다.
```json
{
  "type": "module"
}
```
`.js`의 파일은 package.json의 type 필드에 따라 결정되는데
- type이 module이면 ESM, commonjs이면 CJS로 인식한다. (default는 commonjs)
- `.cjs`는 commonjs로 인식하고, `.mjs`는 ESM으로 인식한다.


---
참고
- [toss blog](https://toss.tech/article/commonjs-esm-exports-field)
- [kakao blog](https://tech.kakao.com/2023/10/19/commonjs-esm-migration/)
- [CJS](https://nodejs.org/api/modules.html)
- [ESM](https://nodejs.org/api/esm.html)
20:T1101,
자바스크립트에서 원시타입(primitive data type)은 변경 불가능한(immutable)한 값이다.

- Boolean
- String
- Number
- undefined
- null
- Symbol

변경이 불가능하다라는 뜻은 메모리 영역에서의 변경이 불가능하다는 뜻이며, 재할당은 가능하다.

---

원시타입 이외의 모든 값은 Object(객체)이다. 객체는 변경 가능한(mutable)한 값이다.
객체는 변경 가능한(mutable)값이기 때문에 새로운 값을 다시 만들 필요없이 직접 변경이 가능하다.

```javascript
let string = "hello";
string = "world";
```
string 변수에 "hello"라는 문자열을 할당하고, 다시 "world"라는 문자열을 할당했다. 이때, 첫번째 문자열은 메모리에서 사라지고, 새로운 문자열이 메모리에 할당된다.

```javascript
let string = "hello";
let string2 = string.slice(0, 3);

// string = "hello"
// string2 = "hel"
```
string 변수에 "hello"라는 문자열을 할당하고, string2 변수에 string 변수의 문자열을 복사하여 할당했다. 이때, string 변수의 문자열은 변경되지 않는다.

---

```javascript
let arr = [];

let arr2 = arr.push(1);

// arr = [1]
```

배열은 객체이기 때문에 변경이 가능하다. 위의 코드에서 arr.push(1)을 통해 arr 배열에 1이라는 원소가 추가되었다. 이때, arr 배열은 변경된다.
복사본을 리턴하는 메소드가 아닌 push, pop, shift, unshift, splice 등의 메소드는 원본 배열을 변경한다.

```javascript
let object = {
  name: "been",
};

let object2 = object;

object2.name = "been2";

console.log(object.name); // been2
```

객체는 변경이 가능하기 때문에 object2 변수에 object 변수를 할당하고, object2.name을 변경하면 object.name도 변경된다.
object도 동시에 변경되는 이유는 object2에 object를 할당할 때, object2는 object의 메모리 주소를 참조하기 때문이다.

object에서 불변성을 유지하는 방법은 새로운 객체를 생성하여 값을 할당하는 방법이다.

---

### 불변성을 유지하는 방법
- Spread Operator(es6)
- Object.assign()
- Array.concat()
- Array.slice()
- Array.map()
- Array.filter()
- Array.reduce()
...등

```javascript
let object = {
  name: "been",
};

let object2 = {
  ...object,
  name: "been2",
};

console.log(object.name); // been
```

object2에 object를 복사하여 새로운 객체를 생성하고, name을 변경하였다. 이때, object는 변경되지 않는다.

---

### 리액트에서 불변성을 지키는 이유

리액트를 사용해 개발을 할 때 useState 등을 사용해 상태를 관리 할 때 push, pop, shift, unshift 등의 메소드를 사용하지 않고,
새로운 배열을 만들어서 상태를 변경하며 자연스럽게 불변성을 지키며 개발을 했다.

리액트에서는 상태값을 업데이트 할 때 얕은비교를 수행해 이전 상태(참조값)와 새로운 상태(참조값)를 비교 한다.
새로운 참조값을 가진 Object를 생성하므로 이전 참조값에 영향을 주지 않는다.

1. 불변성을 지키면 상태값을 업데이트 할 때 이전 상태와 새로운 상태를 비교하여 변경된 부분만 업데이트 하기 때문에 성능적으로 이점이 있다.
2. 상태가 의도치않게 변경되는 것을 막을 수 있고, 사이드 이펙트를 사전에 방지하고 예측 가능한 코드를 작성할 수 있다.

- 상태 업데이트
```javascript
const [state, setState] = useState(1);

// 불변성을 지키지 않은 상태 업데이트
  state = 2;
  setState(state);

// 불변성을 지킨 상태 업데이트
  setState(2);
```

- 배열
```javascript
const [state, setState] = useState([1, 2, 3]);

// 불변성을 지키지 않은 상태 업데이트
  state.push(4);
  setState(state);

// 불변성을 지킨 상태 업데이트
  setState([...state, 4]);
```

- 객체
```javascript
const [state, setState] = useState({
  name: "been",
  age: 32,
});

// 불변성을 지키지 않은 상태 업데이트
  state.name = "been2";
  setState(state);

// 불변성을 지킨 상태 업데이트
  setState({
    ...state,
    name: "been2",
  });
```

이처럼 리액트로 개발을 할 때 불변성을 유지함으로써 안정성을 유지하고 성능을 향상시킬 수 있다.
21:Tcc7,
로컬 개발환경에서 API 요청시 CORS 에러로 API 사용이 어려울 수 있습니다.

이 글은 Vite로 구성된 로컬 개발환경에서 CORS 문제를 해결하는 방식을 작성합니다.

---

### env

먼저 [환경변수 설정](https://ko.vitejs.dev/guide/env-and-mode.html#modes)이 필요합니다.

```shell
.env                # 모든 상황에서 사용될 환경 변수
.env.local          # 모든 상황에서 사용되나, 로컬 개발 환경에서만 사용될(Git에 의해 무시될) 환경 변수
.env.[mode]         # 특정 모드에서만 사용될 환경 변수
.env.[mode].local   # 특정 모드에서만 사용되나, 로컬 개발 환경에서만 사용될(Git에 의해 무시될) 환경 변수
```

위 환경 변수는 따로 커스텀이 가능하지만, 기본적으로 Vite script 명령은 dev → development 모드로 동작하고, build → production 모드로 동작합니다.

따라서 npm run dev로 스크립트를 실행하면 Vite는 .env.development에 정의된 환경변수를 사용합니다.

```shell
// .env.development

VITE_BASE_URL=/api
VITE_SERVER_URL=https://dev.example.com/
```

```shell
// .env.production

VITE_BASE_URL=/api
VITE_SERVER_URL=https://example.com/
```

---

### fetch

[axios](https://axios-http.com/kr/docs/intro) 라이브러리를 사용해 비동기 HTTP 요청을 합니다.

```tsx
import axios from 'axios';

const baseURL = import.meta.env.VITE_BASE_URL;

export const axiosInstance = axios.create({
  baseURL,
});
```

위에서 설정한 환경변수에서 BASE_URL을 불러와 axios 기본 설정을 진행합니다.

---

### proxy

Vite는 vite.config.ts에서 server.proxy를 사용해 [Server Options](https://ko.vitejs.dev/config/server-options.html#server-proxy)을 설정할 수 있습니다.

server.proxy를 사용하면 브라우저의 요청 → 프록시 서버 → 서버로 전달 되며, 프록시 서버에서 설정한 도메인으로 변환하여 서버에 API 요청을 하게 됩니다.

```tsx
// vite.config.ts

import { defineConfig, loadEnv } from 'vite';
import react from '@vitejs/plugin-react-swc';
import tsconfigPaths from 'vite-tsconfig-paths';

// https://vitejs.dev/config/
export default ({ mode }) => {
  const isDevelop = mode === 'development';
  process.env = { ...process.env, ...loadEnv(mode, process.cwd()) };

  return defineConfig({
    plugins: [react(), tsconfigPaths()],
    server: isDevelop
      ? {
          proxy: {
            '/api': {
              target: process.env.VITE_SERVER_URL,
              changeOrigin: true,
              secure: false,
            },
          },
        }
      : undefined,
  });
};
```

일반적으로 production 환경에서는 도메인이 같기 때문에 proxy를 사용하지 않습니다.

따라서, 위의 설정을 예시로 들어 `http://localhost:5173/api/hello` 라는 URL로 요청을 보낼 때 다음과 같은 과정이 진행됩니다.

1. 클라이언트의 요청 URL이 `/api`로 시작되므로 해당 프록시 설정이 적용
2. 프록시는 `changeOption` 에 의하여 HTTP 요청 헤더의 Host 값을 `https://example.com` 으로 변경
3. 프록시는 최종적으로 이 요청을 `https://example.com` 라는 URL로 `target` 서버에 전달

9:["$","section",null,{"className":"flex flex-col-reverse md:relative md:flex-row","children":[["$","$L17",null,{"isPagination":true,"posts":{"posts":[{"content":"$18","data":{"title":"세션과 쿠키","date":"$D2025-05-23T00:00:00.000Z","description":"세션과 쿠키의 개념과 차이점","category":"javaScript","titleImage":"/assets/postIcon/javascript.webp"},"slug":"session-cookie"},{"content":"$19","data":{"title":"React Parallel Routes","date":"$D2025-04-14T00:00:00.000Z","description":"AOS 웹뷰에서 뒤로가기시 모달을 닫으려면?","category":"javaScript","titleImage":"/assets/postIcon/logo192.webp"},"slug":"react-parallel-routes"},{"content":"$1a","data":{"title":"2년간 스터디하며 배운것들","date":"$D2025-03-18T00:00:00.000Z","description":"2년간의 스터디를 회고하며 느낀 점과 배운 점","category":"til","titleImage":"/assets/postIcon/til.webp"},"slug":"study-remind"},{"content":"$1b","data":{"title":"React Native Deep Linking (2)","date":"$D2025-02-03T00:00:00.000Z","description":"React Native Deep Linking 연결","category":"javaScript","titleImage":"/assets/postIcon/logo192.webp"},"slug":"rn-deep-link-2"},{"content":"$1c","data":{"title":"document.visibilityState","date":"$D2024-12-06T00:00:00.000Z","description":"document.visibilityState를 이용한 페이지의 상태를 확인하는 방법","category":"javaScript","titleImage":"/assets/postIcon/javascript.webp"},"slug":"visibilityState"},{"content":"$1d","data":{"title":"IOS 웹뷰에서 safe area 설정하기","date":"$D2024-07-02T00:00:00.000Z","description":"IOS 웹뷰에서 safe area 를 설정하는 방법","category":"javaScript","titleImage":"/assets/postIcon/javascript.webp"},"slug":"webview-safe-area"},{"content":"$1e","data":{"title":"rollup으로 번들링하는 과정","date":"$D2024-03-09T00:00:00.000Z","description":"처음 rollup으로 번들링하는 과정에서 겪은 문제들과 해결방법","category":"javaScript","titleImage":"/assets/postIcon/rollup-logo.svg"},"slug":"rollup"},{"content":"$1f","data":{"title":"cjs와 esm","date":"$D2024-03-07T00:00:00.000Z","description":"rollup으로 번들링하는 과정에서 알게된 cjs와 esm의 차이점에 대해","category":"javaScript","titleImage":"/assets/postIcon/javascript.webp"},"slug":"module-system"},{"content":"$20","data":{"title":"리액트에서 불변성을 지키는 이유","date":"$D2024-02-25T00:00:00.000Z","description":"리액트에서 불변성을 지키는 이유","category":"javaScript","titleImage":"/assets/postIcon/logo192.webp"},"slug":"react-immutable"},{"content":"$21","data":{"title":"Vite proxy 설정","date":"$D2024-01-18T00:00:00.000Z","description":"Vite 로컬환경에서 CORS 문제 해결하기","category":"javaScript","titleImage":"/assets/postIcon/logo192.webp"},"slug":"vite-proxy"}],"total":44},"page":"$undefined"}],["$","ul",null,{"className":"relative top-0 flex h-fit min-w-fit flex-row flex-wrap gap-[20px] py-[20px] pl-0 md:sticky md:top-[100px] md:flex-col md:flex-nowrap md:py-0 md:pl-[30px]","children":[["$","h2",null,{"className":"hidden text-[18px] font-bold md:inline","children":"Category"}],[["$","li","javaScript",{"children":["$","$L4",null,{"className":"text-gray700","href":"/blog/javaScript","children":"javaScript (40)"}]}],["$","li","til",{"children":["$","$L4",null,{"className":"text-gray700","href":"/blog/til","children":"til (2)"}]}],["$","li","study",{"children":["$","$L4",null,{"className":"text-gray700","href":"/blog/study","children":"study (2)"}]}]]]}]]}]
12:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
16:{"metadata":[["$","title","0",{"children":"Been blog"}],["$","meta","1",{"name":"description","content":"Been dev-note"}],["$","meta","2",{"name":"google-site-verification","content":"BirkRt7C7FYMLW96RbXad2EtPdcl0-_ti9xCRkCHa5U"}],["$","meta","3",{"name":"naver-site-verification","content":"58945b2bbe2fe86252fa8c7b204b40f6019920e9"}],["$","link","4",{"rel":"canonical","href":"https://wonbeenna.github.io"}],["$","meta","5",{"property":"og:title","content":"Been blog"}],["$","meta","6",{"property":"og:description","content":"Been dev-note"}],["$","meta","7",{"property":"og:url","content":"https://wonbeenna.github.io"}],["$","meta","8",{"property":"og:site_name","content":"Been blog"}],["$","meta","9",{"property":"og:locale","content":"ko_KR"}],["$","meta","10",{"property":"og:image","content":"https://wonbeenna.github.io/favicon.png"}],["$","meta","11",{"property":"og:image:width","content":"800"}],["$","meta","12",{"property":"og:image:height","content":"600"}],["$","meta","13",{"property":"og:image:alt","content":"Been blog"}],["$","meta","14",{"property":"og:type","content":"website"}],["$","meta","15",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","16",{"name":"twitter:title","content":"Been blog"}],["$","meta","17",{"name":"twitter:description","content":"Been dev-note"}],["$","meta","18",{"name":"twitter:image","content":"https://wonbeenna.github.io/favicon.png"}],["$","meta","19",{"name":"twitter:image:width","content":"800"}],["$","meta","20",{"name":"twitter:image:height","content":"600"}],["$","meta","21",{"name":"twitter:image:alt","content":"Been blog"}],["$","link","22",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"192x192"}],["$","link","23",{"rel":"icon","href":"/favicon.ico","sizes":"any"}],["$","link","24",{"rel":"icon","href":"/favicon.png","sizes":"32x32","type":"image/png"}],["$","link","25",{"rel":"apple-touch-icon","href":"/favicon.png","sizes":"32x32","type":"image/png"}]],"error":null,"digest":"$undefined"}
10:{"metadata":"$16:metadata","error":null,"digest":"$undefined"}
